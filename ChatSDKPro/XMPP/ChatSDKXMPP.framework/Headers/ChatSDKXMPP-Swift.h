// Generated by Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
#ifndef CHATSDKXMPP_SWIFT_H
#define CHATSDKXMPP_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import ChatSDK;
@import ChatSDKModules;
@import Dispatch;
@import Foundation;
@import KissXML;
@import ObjectiveC;
#endif

#import <ChatSDKXMPP/ChatSDKXMPP.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="ChatSDKXMPP",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class XMPPCapabilities;
@class DDXMLElement;
@class XMPPJID;

SWIFT_CLASS("_TtC11ChatSDKXMPP20CapabilitiesListener")
@interface CapabilitiesListener : XMPPModule <XMPPCapabilitiesDelegate>
- (void)xmppCapabilities:(XMPPCapabilities * _Nonnull)sender didDiscoverCapabilities:(DDXMLElement * _Nonnull)caps forJID:(XMPPJID * _Nonnull)jid;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDispatchQueue:(dispatch_queue_t _Nullable)queue OBJC_DESIGNATED_INITIALIZER;
@end

@class XMPPStream;
@class NSNumber;
@class XMPPPresence;
@class XMPPMessage;
@class XMPPIQ;
@class NSString;
@class NSDate;
@class RXPromise;

SWIFT_CLASS("_TtC11ChatSDKXMPP17ConnectionManager")
@interface ConnectionManager : XMPPModule <XMPPStreamDelegate>
- (nonnull instancetype)initWithDispatchQueue:(dispatch_queue_t _Nullable)queue OBJC_DESIGNATED_INITIALIZER;
- (BOOL)activate:(XMPPStream * _Nonnull)aXmppStream SWIFT_WARN_UNUSED_RESULT;
- (void)reconnect;
- (void)xmppStreamDidAuthenticate:(XMPPStream * _Nonnull)sender;
- (void)xmppStreamDidDisconnect:(XMPPStream * _Nonnull)sender withError:(NSError * _Nullable)error;
- (void)deactivate;
- (void)xmppStream:(XMPPStream * _Nonnull)sender didReceivePresence:(XMPPPresence * _Nonnull)presence;
- (void)xmppStream:(XMPPStream * _Nonnull)sender didReceiveMessage:(XMPPMessage * _Nonnull)message;
- (BOOL)xmppStream:(XMPPStream * _Nonnull)sender didReceiveIQ:(XMPPIQ * _Nonnull)iq SWIFT_WARN_UNUSED_RESULT;
- (void)updateLastOnlineWithBare:(NSString * _Nonnull)bare threadId:(NSString * _Nonnull)threadId date:(NSDate * _Nullable)date;
- (void)updateLastOnlineWithBare:(NSString * _Nonnull)bare date:(NSDate * _Nullable)date;
- (void)updateLastOnlineWithKey:(NSString * _Nonnull)key date:(NSDate * _Nullable)date;
- (NSDate * _Nullable)lastOnlineWithBare:(NSString * _Nonnull)bare SWIFT_WARN_UNUSED_RESULT;
- (NSDate * _Nullable)lastOnlineWithBare:(NSString * _Nonnull)bare threadId:(NSString * _Nonnull)threadId SWIFT_WARN_UNUSED_RESULT;
- (NSDate * _Nullable)lastOnlineWithKey:(NSString * _Nonnull)key SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)makeKeyWithId:(NSString * _Nonnull)id SWIFT_WARN_UNUSED_RESULT;
- (RXPromise * _Nullable)sendPing SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class XMPPPing;

@interface ConnectionManager (SWIFT_EXTENSION(ChatSDKXMPP)) <XMPPPingDelegate>
- (void)xmppPing:(XMPPPing * _Null_unspecified)sender didReceivePong:(XMPPIQ * _Null_unspecified)pong withRTT:(NSTimeInterval)rtt;
- (void)xmppPing:(XMPPPing * _Null_unspecified)sender didNotReceivePong:(NSString * _Null_unspecified)pingID dueToTimeout:(NSTimeInterval)timeout;
@end

@class XMPPAutoPing;

@interface ConnectionManager (SWIFT_EXTENSION(ChatSDKXMPP)) <XMPPAutoPingDelegate>
- (void)xmppAutoPingDidSendPing:(XMPPAutoPing * _Null_unspecified)sender;
- (void)xmppAutoPingDidTimeout:(XMPPAutoPing * _Null_unspecified)sender;
- (void)xmppAutoPingDidReceivePong:(XMPPAutoPing * _Null_unspecified)sender;
@end



@class XMPPMessageDeliveryReceipts;

SWIFT_CLASS("_TtC11ChatSDKXMPP23DeliveryReceiptListener")
@interface DeliveryReceiptListener : NSObject <XMPPMessageDeliveryReceiptsDelegate>
- (void)xmppMessageDeliveryReceipts:(XMPPMessageDeliveryReceipts * _Nonnull)xmppMessageDeliveryReceipts didReceiveReceiptResponseMessage:(XMPPMessage * _Nonnull)xm;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class XMPPAutoTime;

SWIFT_CLASS("_TtC11ChatSDKXMPP17EntityTimeManager")
@interface EntityTimeManager : XMPPModule <XMPPAutoTimeDelegate, XMPPCapabilitiesDelegate>
- (BOOL)activate:(XMPPStream * _Nonnull)aXmppStream SWIFT_WARN_UNUSED_RESULT;
- (void)deactivate;
- (void)xmppCapabilities:(XMPPCapabilities * _Nonnull)sender didDiscoverCapabilities:(DDXMLElement * _Nonnull)caps forJID:(XMPPJID * _Nonnull)jid;
- (void)xmppAutoTime:(XMPPAutoTime * _Null_unspecified)sender didUpdateTimeDifference:(NSTimeInterval)timeDifference;
- (void)addWithListener:(void (^ _Nonnull)(BOOL))listener;
- (BOOL)ready SWIFT_WARN_UNUSED_RESULT;
- (double)timeDifference SWIFT_WARN_UNUSED_RESULT;
- (NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDispatchQueue:(dispatch_queue_t _Nullable)queue OBJC_DESIGNATED_INITIALIZER;
@end

@class XMPPBookmarksModule;
@protocol XMPPBookmark;

SWIFT_PROTOCOL("_TtP11ChatSDKXMPP21XMPPBookmarksDelegate_")
@protocol XMPPBookmarksDelegate <NSObject>
@optional
- (void)xmppBookmarks:(XMPPBookmarksModule * _Nonnull)sender didRetrieve:(NSArray<id <XMPPBookmark>> * _Nonnull)bookmarks responseIq:(XMPPIQ * _Nonnull)responseIq;
- (void)xmppBookmarks:(XMPPBookmarksModule * _Nonnull)sender didNotRetrieveBookmarks:(XMPPIQ * _Nullable)errorIq;
- (void)xmppBookmarks:(XMPPBookmarksModule * _Nonnull)sender didPublish:(NSArray<id <XMPPBookmark>> * _Nonnull)bookmarks responseIq:(XMPPIQ * _Nonnull)responseIq;
- (void)xmppBookmarks:(XMPPBookmarksModule * _Nonnull)sender didNotPublishBookmarks:(XMPPIQ * _Nullable)errorIq;
@end


@interface GCDMulticastDelegate (SWIFT_EXTENSION(ChatSDKXMPP)) <XMPPBookmarksDelegate>
@end



SWIFT_CLASS("_TtC11ChatSDKXMPP18GroupInviteMessage")
@interface GroupInviteMessage : NSObject
+ (XMPPMessage * _Nonnull)getTo:(XMPPJID * _Nonnull)to chatId:(XMPPJID * _Nonnull)chatId SWIFT_WARN_UNUSED_RESULT;
+ (BOOL)isType:(XMPPMessage * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@protocol PThread;
@protocol PUser;

SWIFT_CLASS("_TtC11ChatSDKXMPP15IncomingMessage")
@interface IncomingMessage : NSObject
@property (nonatomic, readonly, strong) XMPPMessage * _Nonnull message;
@property (nonatomic, readonly, strong) id <PThread> _Nonnull thread;
@property (nonatomic, readonly, strong) id <PUser> _Nonnull user;
- (nonnull instancetype)initWithMessage:(XMPPMessage * _Nonnull)message thread:(id <PThread> _Nonnull)thread user:(id <PUser> _Nonnull)user OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11ChatSDKXMPP20IncomingMessageQueue")
@interface IncomingMessageQueue : NSObject
@property (nonatomic, copy) NSArray<IncomingMessage *> * _Nonnull queue;
@property (nonatomic, copy) void (^ _Nullable sendAction)(IncomingMessage * _Nonnull);
- (void)addWithMessage:(IncomingMessage * _Nonnull)message;
- (void)flush;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11ChatSDKXMPP17LeaveGroupMessage")
@interface LeaveGroupMessage : NSObject
+ (BOOL)isType:(XMPPMessage * _Nonnull)leaveGroupMessage SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11ChatSDKXMPP7MUCUser")
@interface MUCUser : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull affiliation;
@property (nonatomic, readonly, copy) NSString * _Nonnull jid;
@property (nonatomic, readonly, copy) NSString * _Nonnull role;
@property (nonatomic, readonly, copy) NSString * _Nonnull nick;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class XMPPMessageArchiveManagement;
@class XMPPResultSet;

SWIFT_CLASS("_TtC11ChatSDKXMPP10MamManager")
@interface MamManager : XMPPModule <XMPPMessageArchiveManagementDelegate>
@property (nonatomic) BOOL isLoaded;
@property (nonatomic) BOOL isLoading;
- (BOOL)activate:(XMPPStream * _Nonnull)aXmppStream SWIFT_WARN_UNUSED_RESULT;
- (void)deactivate;
- (void)xmppMessageArchiveManagement:(XMPPMessageArchiveManagement * _Nonnull)xmppMessageArchiveManagement didFinishReceivingMessagesWithSet:(XMPPResultSet * _Nonnull)resultSet queryId:(NSString * _Nonnull)queryId;
- (void)xmppMessageArchiveManagement:(XMPPMessageArchiveManagement * _Nonnull)xmppMessageArchiveManagement didReceiveMAMMessage:(XMPPMessage * _Nonnull)message;
- (void)xmppMessageArchiveManagement:(XMPPMessageArchiveManagement * _Nonnull)xmppMessageArchiveManagement didReceiveFormFields:(XMPPIQ * _Nonnull)iq;
- (void)xmppMessageArchiveManagement:(XMPPMessageArchiveManagement * _Nonnull)xmppMessageArchiveManagement didFailToReceiveMessages:(XMPPIQ * _Nullable)error queryId:(NSString * _Nonnull)queryId;
- (void)xmppMessageArchiveManagement:(XMPPMessageArchiveManagement * _Nonnull)xmppMessageArchiveManagement didFailToReceiveFormFields:(XMPPIQ * _Nonnull)iq;
- (RXPromise * _Nullable)requestMessageArchiveCompat:(NSDate * _Nullable)from to:(NSDate * _Nullable)to max:(NSNumber * _Nullable)max SWIFT_WARN_UNUSED_RESULT;
- (RXPromise * _Nullable)requestMessageArchiveCompat:(NSString * _Nullable)last max:(NSNumber * _Nullable)max SWIFT_WARN_UNUSED_RESULT;
- (void)goOffline;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDispatchQueue:(dispatch_queue_t _Nullable)queue OBJC_DESIGNATED_INITIALIZER;
@end

@class XMPPStreamManagement;

SWIFT_CLASS("_TtC11ChatSDKXMPP20OutgoingMessageQueue")
@interface OutgoingMessageQueue : XMPPModule <XMPPStreamDelegate, XMPPStreamManagementDelegate>
- (BOOL)activate:(XMPPStream * _Nonnull)aXmppStream SWIFT_WARN_UNUSED_RESULT;
- (void)pause;
- (void)pauseAndCache;
- (void)updateDefaultsWithUserId:(NSString * _Nonnull)userId;
- (void)start;
- (void)startAndUncacheWithUserId:(NSString * _Nonnull)userId;
- (void)deactivate;
- (void)addWithMessage:(XMPPMessage * _Nonnull)message;
- (XMPPMessage * _Nullable)xmppStream:(XMPPStream * _Nonnull)sender willSendMessage:(XMPPMessage * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
- (void)xmppStream:(XMPPStream * _Nonnull)sender didFailToSendMessage:(XMPPMessage * _Nonnull)message error:(NSError * _Nonnull)error;
- (void)xmppStream:(XMPPStream * _Nonnull)sender didSendMessage:(XMPPMessage * _Nonnull)message;
- (void)xmppStreamManagement:(XMPPStreamManagement * _Nonnull)sender didReceiveAckForStanzaIds:(NSArray * _Nonnull)stanzaIds;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDispatchQueue:(dispatch_queue_t _Nullable)queue OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11ChatSDKXMPP14OutgoingStanza")
@interface OutgoingStanza : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull Delay;)
+ (NSString * _Nonnull)Delay SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11ChatSDKXMPP12PingListener")
@interface PingListener : NSObject <XMPPAutoPingDelegate>
@property (nonatomic, copy) void (^ _Nullable failure)(void);
- (void)xmppAutoPingDidSendPing:(XMPPAutoPing * _Null_unspecified)sender;
- (void)xmppAutoPingDidTimeout:(XMPPAutoPing * _Null_unspecified)sender;
- (void)xmppAutoPingDidReceivePong:(XMPPAutoPing * _Null_unspecified)sender;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11ChatSDKXMPP12PrivacyLists")
@interface PrivacyLists : XMPPModule <XMPPPrivacyDelegate, XMPPStreamDelegate>
- (void)setWithTargetList:(NSString * _Nullable)targetList;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDispatchQueue:(dispatch_queue_t _Nullable)queue OBJC_DESIGNATED_INITIALIZER;
@end


@class XMPPPrivacy;

@interface PrivacyLists (SWIFT_EXTENSION(ChatSDKXMPP))
- (void)xmppPrivacy:(XMPPPrivacy * _Null_unspecified)sender didReceiveListNames:(NSArray * _Null_unspecified)listNames;
- (void)xmppPrivacy:(XMPPPrivacy * _Null_unspecified)sender didNotReceiveListNamesDueToError:(id _Null_unspecified)error;
- (void)xmppPrivacy:(XMPPPrivacy * _Null_unspecified)sender didSetListWithName:(NSString * _Null_unspecified)name;
- (void)xmppPrivacy:(XMPPPrivacy * _Null_unspecified)sender didNotSetListWithName:(NSString * _Null_unspecified)name error:(id _Null_unspecified)error;
- (void)xmppPrivacy:(XMPPPrivacy * _Null_unspecified)sender didSetDefaultListName:(NSString * _Null_unspecified)name;
- (void)xmppPrivacy:(XMPPPrivacy * _Null_unspecified)sender didNotSetDefaultListName:(NSString * _Null_unspecified)name error:(id _Null_unspecified)error;
- (void)xmppPrivacy:(XMPPPrivacy * _Null_unspecified)sender didSetActiveListName:(NSString * _Null_unspecified)name;
- (void)xmppPrivacy:(XMPPPrivacy * _Null_unspecified)sender didNotSetActiveListName:(NSString * _Null_unspecified)name error:(id _Null_unspecified)error;
@end

@class XMPPPubSub;

SWIFT_CLASS("_TtC11ChatSDKXMPP14PubSubListener")
@interface PubSubListener : NSObject <XMPPPubSubDelegate>
- (void)xmppPubSub:(XMPPPubSub * _Nonnull)sender didSubscribeToNode:(NSString * _Nonnull)node withResult:(XMPPIQ * _Nonnull)iq;
- (void)xmppPubSub:(XMPPPubSub * _Nonnull)sender didNotSubscribeToNode:(NSString * _Nonnull)node withError:(XMPPIQ * _Nonnull)iq;
- (void)xmppPubSub:(XMPPPubSub * _Nonnull)sender didUnsubscribeFromNode:(NSString * _Nonnull)node withResult:(XMPPIQ * _Nonnull)iq;
- (void)xmppPubSub:(XMPPPubSub * _Nonnull)sender didNotUnsubscribeFromNode:(NSString * _Nonnull)node withError:(XMPPIQ * _Nonnull)iq;
- (void)xmppPubSub:(XMPPPubSub * _Nonnull)sender didRetrieveSubscriptions:(XMPPIQ * _Nonnull)iq forNode:(NSString * _Nonnull)node;
- (void)xmppPubSub:(XMPPPubSub * _Nonnull)sender didNotRetrieveSubscriptions:(XMPPIQ * _Nonnull)iq forNode:(NSString * _Nonnull)node;
- (void)xmppPubSub:(XMPPPubSub * _Nonnull)sender didRetrieveSubscriptions:(XMPPIQ * _Nonnull)iq;
- (void)xmppPubSub:(XMPPPubSub * _Nonnull)sender didNotRetrieveSubscriptions:(XMPPIQ * _Nonnull)iq;
- (void)xmppPubSub:(XMPPPubSub * _Nonnull)sender didConfigureNode:(NSString * _Nonnull)node withResult:(XMPPIQ * _Nonnull)iq;
- (void)xmppPubSub:(XMPPPubSub * _Nonnull)sender didNotConfigureNode:(NSString * _Nonnull)node withError:(XMPPIQ * _Nonnull)iq;
- (void)xmppPubSub:(XMPPPubSub * _Nonnull)sender didPublishToNode:(NSString * _Nonnull)node withResult:(XMPPIQ * _Nonnull)iq;
- (void)xmppPubSub:(XMPPPubSub * _Nonnull)sender didNotPublishToNode:(NSString * _Nonnull)node withError:(XMPPIQ * _Nonnull)iq;
- (void)xmppPubSub:(XMPPPubSub * _Nonnull)sender didCreateNode:(NSString * _Nonnull)node withResult:(XMPPIQ * _Nonnull)iq;
- (void)xmppPubSub:(XMPPPubSub * _Nonnull)sender didNotCreateNode:(NSString * _Nonnull)node withError:(XMPPIQ * _Nonnull)iq;
- (void)xmppPubSub:(XMPPPubSub * _Nonnull)sender didDeleteNode:(NSString * _Nonnull)node withResult:(XMPPIQ * _Nonnull)iq;
- (void)xmppPubSub:(XMPPPubSub * _Nonnull)sender didNotDeleteNode:(NSString * _Nonnull)node withError:(XMPPIQ * _Nonnull)iq;
- (void)xmppPubSub:(XMPPPubSub * _Nonnull)sender didConfigureSubscriptionToNode:(NSString * _Nonnull)node withResult:(XMPPIQ * _Nonnull)iq;
- (void)xmppPubSub:(XMPPPubSub * _Nonnull)sender didNotConfigureSubscriptionToNode:(NSString * _Nonnull)node withError:(XMPPIQ * _Nonnull)iq;
- (void)xmppPubSub:(XMPPPubSub * _Nonnull)sender didReceiveMessage:(XMPPMessage * _Nonnull)message;
- (void)xmppPubSub:(XMPPPubSub * _Nonnull)sender didRetrieveItems:(XMPPIQ * _Nonnull)iq fromNode:(NSString * _Nonnull)node;
- (void)xmppPubSub:(XMPPPubSub * _Nonnull)sender didNotRetrieveItems:(XMPPIQ * _Nonnull)iq fromNode:(NSString * _Nonnull)node;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



SWIFT_CLASS("_TtC11ChatSDKXMPP13PubSubManager")
@interface PubSubManager : XMPPModule <XMPPStreamDelegate>
- (BOOL)activate:(XMPPStream * _Nonnull)aXmppStream SWIFT_WARN_UNUSED_RESULT;
- (void)deactivate;
- (void)connectToServiceWithJid:(XMPPJID * _Nonnull)jid;
- (RXPromise * _Nonnull)requestWithNode:(NSString * _Nonnull)node SWIFT_WARN_UNUSED_RESULT;
- (void)xmppStream:(XMPPStream * _Nonnull)sender didReceivePresence:(XMPPPresence * _Nonnull)presence;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDispatchQueue:(dispatch_queue_t _Nullable)queue OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11ChatSDKXMPP15PublicKeyExtras")
@interface PublicKeyExtras : NSObject
+ (XMLElement * _Nullable)getPublicKeyExtras SWIFT_WARN_UNUSED_RESULT;
+ (void)handleWithUserId:(NSString * _Nonnull)userId extras:(XMLElement * _Nullable)extras;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11ChatSDKXMPP34RegistrationPasswordChangeListener")
@interface RegistrationPasswordChangeListener : NSObject
@property (nonatomic, copy) void (^ _Nullable passwordChangedResult)(NSError * _Nullable);
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class XMPPRegistration;

@interface RegistrationPasswordChangeListener (SWIFT_EXTENSION(ChatSDKXMPP)) <XMPPRegistrationDelegate>
- (void)passwordChangeSuccessful:(XMPPRegistration * _Nonnull)sender;
- (void)passwordChangeFailed:(XMPPRegistration * _Nonnull)sender withError:(NSError * _Nullable)error;
@end

@class XMPPRoom;

SWIFT_CLASS("_TtC11ChatSDKXMPP12RoomListener")
@interface RoomListener : XMPPModule <XMPPRoomDelegate, XMPPStreamDelegate>
- (void)xmppRoom:(XMPPRoom * _Nonnull)sender didFetchOwnersList:(NSArray * _Nonnull)items;
- (void)xmppRoom:(XMPPRoom * _Nonnull)sender didNotFetchOwnersList:(XMPPIQ * _Nonnull)iqError;
- (void)xmppRoom:(XMPPRoom * _Nonnull)sender didFetchAdminsList:(NSArray * _Nonnull)items;
- (void)xmppRoom:(XMPPRoom * _Nonnull)sender didNotFetchAdminsList:(XMPPIQ * _Nonnull)iqError;
- (void)xmppRoom:(XMPPRoom * _Nonnull)sender didFetchMembersList:(NSArray * _Nonnull)items;
- (void)xmppRoom:(XMPPRoom * _Nonnull)sender didNotFetchMembersList:(XMPPIQ * _Nonnull)iqError;
- (void)xmppRoom:(XMPPRoom * _Nonnull)sender didFetchBanList:(NSArray * _Nonnull)items;
- (void)xmppRoom:(XMPPRoom * _Nonnull)sender didNotFetchBanList:(XMPPIQ * _Nonnull)iqError;
- (void)xmppRoom:(XMPPRoom * _Nonnull)sender didFetchModeratorsList:(NSArray * _Nonnull)items;
- (void)xmppRoom:(XMPPRoom * _Nonnull)sender didNotFetchModeratorsList:(XMPPIQ * _Nonnull)iqError;
- (void)xmppRoom:(XMPPRoom * _Nonnull)sender didEditPrivileges:(XMPPIQ * _Nonnull)iqResult;
- (void)xmppRoom:(XMPPRoom * _Nonnull)sender didNotEditPrivileges:(XMPPIQ * _Nonnull)iqError;
- (void)xmppRoomDidJoin:(XMPPRoom * _Nonnull)sender;
- (void)xmppRoom:(XMPPRoom * _Nonnull)sender occupantDidJoin:(XMPPJID * _Nonnull)occupantJID withPresence:(XMPPPresence * _Nonnull)presence;
- (void)xmppRoom:(XMPPRoom * _Nonnull)sender occupantDidLeave:(XMPPJID * _Nonnull)occupantJID withPresence:(XMPPPresence * _Nonnull)presence;
- (void)xmppRoomDidDestroy:(XMPPRoom * _Nonnull)sender;
- (void)xmppRoom:(XMPPRoom * _Nonnull)sender didFailToDestroy:(XMPPIQ * _Nonnull)iqError;
- (void)xmppStream:(XMPPStream * _Nonnull)sender didReceivePresence:(XMPPPresence * _Nonnull)presence;
- (void)xmppRoom:(XMPPRoom * _Nonnull)sender didReceiveMessage:(XMPPMessage * _Nonnull)message fromOccupant:(XMPPJID * _Nonnull)occupantJID;
- (void)xmppRoomDidLeave:(XMPPRoom * _Nonnull)sender;
- (NSString * _Nullable)userJIDWithRoomJID:(XMPPJID * _Nonnull)roomJID SWIFT_WARN_UNUSED_RESULT;
- (void)xmppRoomDidCreate:(XMPPRoom * _Nonnull)sender;
- (RXPromise * _Nonnull)fetchConfigurationForm SWIFT_WARN_UNUSED_RESULT;
- (void)xmppRoom:(XMPPRoom * _Nonnull)sender didFetchConfigurationForm:(DDXMLElement * _Nonnull)configForm;
- (void)xmppRoom:(XMPPRoom * _Nonnull)sender willSendConfiguration:(XMPPIQ * _Nonnull)roomConfigForm;
- (void)xmppRoom:(XMPPRoom * _Nonnull)sender didConfigure:(XMPPIQ * _Nonnull)iqResult;
- (void)xmppRoom:(XMPPRoom * _Nonnull)sender didNotConfigure:(XMPPIQ * _Nonnull)iqResult;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithDispatchQueue:(dispatch_queue_t _Nullable)queue SWIFT_UNAVAILABLE;
@end



@protocol PUserConnection;

SWIFT_CLASS("_TtC11ChatSDKXMPP11RoomManager")
@interface RoomManager : XMPPModule
@property (nonatomic, readonly, strong) XMPPRoom * _Nonnull room;
+ (RoomManager * _Nullable)create:(NSString * _Nonnull)name queue:(dispatch_queue_t _Nonnull)queue xmppStream:(XMPPStream * _Nonnull)xmppStream SWIFT_WARN_UNUSED_RESULT;
+ (RoomManager * _Nullable)withRoom:(NSString * _Nonnull)roomJID queue:(dispatch_queue_t _Nonnull)queue xmppStream:(XMPPStream * _Nonnull)xmppStream SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithRoom:(XMPPRoom * _Nonnull)room queue:(dispatch_queue_t _Nonnull)queue OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRoom:(XMPPRoom * _Nonnull)room name:(NSString * _Nonnull)name queue:(dispatch_queue_t _Nonnull)queue OBJC_DESIGNATED_INITIALIZER;
- (BOOL)activate:(XMPPStream * _Nonnull)aXmppStream SWIFT_WARN_UNUSED_RESULT;
- (void)deactivate;
- (RXPromise * _Nonnull)setAffiliationForRoom:(XMPPRoom * _Nonnull)forRoom user:(XMPPJID * _Nonnull)user affiliationString:(NSString * _Nullable)affiliationString roleString:(NSString * _Nullable)roleString SWIFT_WARN_UNUSED_RESULT;
- (RXPromise * _Nonnull)send:(XMPPMessage * _Nonnull)message SWIFT_WARN_UNUSED_RESULT;
- (RXPromise * _Nullable)destroy SWIFT_WARN_UNUSED_RESULT;
- (void)bookmark;
- (RXPromise * _Nonnull)refreshRoles SWIFT_WARN_UNUSED_RESULT;
- (id <PThread> _Nullable)getThread SWIFT_WARN_UNUSED_RESULT;
- (id <PUserConnection> _Nullable)getConnectionWithUserEntityID:(NSString * _Nonnull)userEntityID SWIFT_WARN_UNUSED_RESULT;
- (void)setAsOwner;
- (BOOL)userWithUser:(NSString * _Nonnull)user hasAffiliation:(NSString * _Nonnull)hasAffiliation SWIFT_WARN_UNUSED_RESULT;
- (BOOL)userWithTheUser:(NSString * _Nonnull)theUser hasAffiliation:(NSArray<NSString *> * _Nonnull)hasAffiliation SWIFT_WARN_UNUSED_RESULT;
- (BOOL)userWithUser:(NSString * _Nonnull)user hasRole:(NSString * _Nonnull)hasRole SWIFT_WARN_UNUSED_RESULT;
- (BOOL)userWithTheUser:(NSString * _Nonnull)theUser hasRole:(NSArray<NSString *> * _Nonnull)hasRole SWIFT_WARN_UNUSED_RESULT;
- (void)setWithOwner:(NSString * _Nullable)owner;
- (RXPromise * _Nonnull)updateName SWIFT_WARN_UNUSED_RESULT;
- (RXPromise * _Nullable)roomExists SWIFT_WARN_UNUSED_RESULT;
- (RXPromise * _Nonnull)joinWithBookmark:(BOOL)bookmark history:(NSDate * _Nullable)history SWIFT_WARN_UNUSED_RESULT;
- (RXPromise * _Nonnull)create:(NSString * _Nullable)description inviteJIDs:(NSArray<NSString *> * _Nonnull)inviteJIDs bookmark:(BOOL)bookmark history:(NSDate * _Nullable)history SWIFT_WARN_UNUSED_RESULT;
- (RXPromise * _Nonnull)inviteWithUserEntityID:(NSString * _Nonnull)userEntityID sendInvite:(BOOL)sendInvite SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)nicknameForUser:(NSString * _Nonnull)forUser SWIFT_WARN_UNUSED_RESULT;
+ (NSString * _Nullable)nickname SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithDispatchQueue:(dispatch_queue_t _Nullable)queue SWIFT_UNAVAILABLE;
@end



@interface RoomManager (SWIFT_EXTENSION(ChatSDKXMPP))
- (void)addWithUserEntityID:(NSString * _Nonnull)userEntityID;
- (void)removeWithUserEntityID:(NSString * _Nonnull)userEntityID;
- (void)hasLeftWithUserEntityID:(NSString * _Nonnull)userEntityID;
- (NSString * _Nullable)userJIDWithRoomJID:(XMPPJID * _Nonnull)roomJID SWIFT_WARN_UNUSED_RESULT;
@end


@interface RoomManager (SWIFT_EXTENSION(ChatSDKXMPP))
- (RXPromise * _Nonnull)setAffiliationWithUserJID:(XMPPJID * _Nonnull)userJID affiliation:(NSString * _Nonnull)affiliation SWIFT_WARN_UNUSED_RESULT;
- (RXPromise * _Nonnull)setRoleWithUserJID:(XMPPJID * _Nonnull)userJID role:(NSString * _Nonnull)role SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isDeactivated SWIFT_WARN_UNUSED_RESULT;
- (RXPromise * _Nonnull)delete SWIFT_WARN_UNUSED_RESULT;
- (void)markRoomAsDestroyed;
- (void)unbookmark;
+ (void)unbookmarkWithRoomJID:(XMPPJID * _Nonnull)roomJID;
- (RXPromise * _Nullable)leave SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC11ChatSDKXMPP11RoomOptions")
@interface RoomOptions : NSObject
- (RoomOptions * _Nonnull)descriptionWithValue:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
- (RoomOptions * _Nonnull)occupantsCanChangeSubjectWithValue:(BOOL)value SWIFT_WARN_UNUSED_RESULT;
- (RoomOptions * _Nonnull)contactJidWithValue:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
- (RoomOptions * _Nonnull)subjectWithValue:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
- (RoomOptions * _Nonnull)canChangeSubjectWithValue:(BOOL)value SWIFT_WARN_UNUSED_RESULT;
- (RoomOptions * _Nonnull)occupantsWithValue:(NSInteger)value SWIFT_WARN_UNUSED_RESULT;
- (RoomOptions * _Nonnull)ldapGroupWithValue:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
- (RoomOptions * _Nonnull)languageWithValue:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
- (RoomOptions * _Nonnull)logsWithValue:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
- (RoomOptions * _Nonnull)maxHistoryFetchWithValue:(NSInteger)value SWIFT_WARN_UNUSED_RESULT;
- (RoomOptions * _Nonnull)pubsubWithValue:(NSString * _Nonnull)value SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11ChatSDKXMPP11UserOptions")
@interface UserOptions : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11ChatSDKXMPP19UserResourceTracker")
@interface UserResourceTracker : XMPPModule <XMPPStreamDelegate>
- (BOOL)activate:(XMPPStream * _Nonnull)aXmppStream SWIFT_WARN_UNUSED_RESULT;
- (void)deactivate;
- (NSArray<XMPPJID *> * _Nonnull)jidsWithJid:(XMPPJID * _Nonnull)jid SWIFT_WARN_UNUSED_RESULT;
- (void)xmppStream:(XMPPStream * _Nonnull)sender didReceivePresence:(XMPPPresence * _Nonnull)presence;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDispatchQueue:(dispatch_queue_t _Nullable)queue OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11ChatSDKXMPP19XMPPBookmarkManager")
@interface XMPPBookmarkManager : XMPPModule <XMPPStreamDelegate>
- (BOOL)activate:(XMPPStream * _Nonnull)aXmppStream SWIFT_WARN_UNUSED_RESULT;
- (void)deactivate;
- (void)getBookmarks;
- (BOOL)xmppStream:(XMPPStream * _Nonnull)sender didReceiveIQ:(XMPPIQ * _Nonnull)iq SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDispatchQueue:(dispatch_queue_t _Nullable)queue OBJC_DESIGNATED_INITIALIZER;
@end


typedef SWIFT_ENUM(NSInteger, XMPPBookmarksMode, closed) {
/// Private XML Storage (XEP-0049)
/// https://xmpp.org/extensions/xep-0049.html
  XMPPBookmarksModePrivateXmlStorage = 0,
};


/// XEP-0048: Booksmarks
/// This specification defines an XML data format for use by XMPP clients in storing bookmarks to mult-user chatrooms and web pages. The chatroom bookmarking function includes the ability to auto-join rooms on login.
/// https://xmpp.org/extensions/xep-0048.html
SWIFT_CLASS("_TtC11ChatSDKXMPP19XMPPBookmarksModule")
@interface XMPPBookmarksModule : XMPPModule
@property (nonatomic, readonly) enum XMPPBookmarksMode mode;
/// Right now there’s only one mode (privateXmlStorage)
- (nonnull instancetype)initWithMode:(enum XMPPBookmarksMode)mode dispatchQueue:(dispatch_queue_t _Nullable)dispatchQueue OBJC_DESIGNATED_INITIALIZER;
- (BOOL)activate:(XMPPStream * _Nonnull)xmppStream;
- (void)deactivate;
/// Fetches all of your stored bookmarks on the server and responds via XMPPBookmarksDelegate
- (void)fetchBookmarks;
/// Overwrites bookmarks on the server and responds via XMPPBookmarksDelegate
- (void)publishBookmarks:(NSArray<id <XMPPBookmark>> * _Nonnull)bookmarks;
/// Fetches bookmarks from server. Block response only (will not trigger MulticastDelegate)
- (void)fetchBookmarks:(void (^ _Nonnull)(NSArray<id <XMPPBookmark>> * _Nullable, XMPPIQ * _Nullable))completion completionQueue:(dispatch_queue_t _Nullable)completionQueue;
/// Fetches and publishes a merged set of bookmarks on the server. The response block will be nil if there was a failure, or the merged set if successful. Block response only (will not trigger MulticastDelegate)
- (void)fetchAndPublishWithBookmarksToAdd:(NSArray<id <XMPPBookmark>> * _Nonnull)bookmarksToAdd bookmarksToRemove:(NSArray<id <XMPPBookmark>> * _Nullable)bookmarksToRemove completion:(void (^ _Nonnull)(NSArray<id <XMPPBookmark>> * _Nullable, XMPPIQ * _Nullable))completion completionQueue:(dispatch_queue_t _Nullable)completionQueue;
/// Overwrites bookmarks on the server. Block response only (will not trigger MulticastDelegate)
- (void)publishBookmarks:(NSArray<id <XMPPBookmark>> * _Nonnull)bookmarks completion:(void (^ _Nonnull)(BOOL, XMPPIQ * _Nullable))completion completionQueue:(dispatch_queue_t _Nullable)completionQueue;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithDispatchQueue:(dispatch_queue_t _Nullable)queue SWIFT_UNAVAILABLE;
@end


@interface XMPPBookmarksModule (SWIFT_EXTENSION(ChatSDKXMPP)) <XMPPStreamDelegate>
- (BOOL)xmppStream:(XMPPStream * _Nonnull)sender didReceiveIQ:(XMPPIQ * _Nonnull)iq SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC11ChatSDKXMPP20XMPPCallbackListener")
@interface XMPPCallbackListener : NSObject
- (nonnull instancetype)initWithListener:(void (^ _Nonnull)(NSDictionary<NSString *, id> * _Nullable, NSError * _Nullable))listener OBJC_DESIGNATED_INITIALIZER;
- (void)resolveWithResult:(NSDictionary<NSString *, id> * _Nullable)result;
- (void)rejectWithError:(NSError * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11ChatSDKXMPP19XMPPCallbackManager")
@interface XMPPCallbackManager : NSObject
- (void)addListenerWithElementID:(NSString * _Nonnull)elementID listener:(XMPPCallbackListener * _Nonnull)listener;
- (RXPromise * _Nonnull)addListenerWithElementID:(NSString * _Nonnull)elementID SWIFT_WARN_UNUSED_RESULT;
- (void)removeListenerWithElementID:(NSString * _Nonnull)elementID listener:(XMPPCallbackListener * _Nonnull)listener;
- (void)resolveWithResultWithElementID:(NSString * _Nonnull)elementID result:(NSDictionary<NSString *, id> * _Nullable)result;
- (void)rejectWithErrorWithElementID:(NSString * _Nonnull)elementID error:(NSError * _Nullable)error;
- (void)clear;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11ChatSDKXMPP21XMPPEncryptionHandler")
@interface XMPPEncryptionHandler : EncryptionHandler
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (RXPromise * _Nonnull)publishKey SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC11ChatSDKXMPP20XMPPEncryptionModule")
@interface XMPPEncryptionModule : EncryptionModule
- (void)activate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC11ChatSDKXMPP11XMPPLogging")
@interface XMPPLogging : NSObject
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL logIQ;)
+ (BOOL)logIQ SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL logPresence;)
+ (BOOL)logPresence SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL logMessages;)
+ (BOOL)logMessages SWIFT_WARN_UNUSED_RESULT;
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) BOOL logConnection;)
+ (BOOL)logConnection SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end





@interface XMPPMessage (SWIFT_EXTENSION(ChatSDKXMPP))
- (XMLElement * _Nullable)received SWIFT_WARN_UNUSED_RESULT;
- (XMLElement * _Nullable)extras SWIFT_WARN_UNUSED_RESULT;
- (BOOL)hasAddresses SWIFT_WARN_UNUSED_RESULT;
- (XMLElement * _Nullable)addresses SWIFT_WARN_UNUSED_RESULT;
- (NSArray<NSString *> * _Nonnull)addressJIDs SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nullable)extFrom SWIFT_WARN_UNUSED_RESULT;
- (BOOL)extIsOneToOneMessage SWIFT_WARN_UNUSED_RESULT;
@end




@interface XMPPPresence (SWIFT_EXTENSION(ChatSDKXMPP))
/// ‘urn:xmpp:idle:1’
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull idleXmlns;)
+ (NSString * _Nonnull)idleXmlns SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, copy) NSDate * _Nullable idleSince;
- (void)addIdleSince:(NSDate * _Nonnull)since;
@end



SWIFT_CLASS("_TtC11ChatSDKXMPP29XMPPPrivateXMLStorageListener")
@interface XMPPPrivateXMLStorageListener : NSObject
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name xmlns:(NSString * _Nonnull)xmlns callback:(void (^ _Nonnull)(NSArray<XMLElement *> * _Nonnull))callback OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC11ChatSDKXMPP28XMPPPrivateXMLStorageManager")
@interface XMPPPrivateXMLStorageManager : XMPPModule
- (void)addListenerWithListener:(XMPPPrivateXMLStorageListener * _Nonnull)listener;
- (void)writeValuesWithName:(NSString * _Nonnull)name xmlns:(NSString * _Nonnull)xmlns options:(NSDictionary<NSString *, NSString *> * _Nonnull)options;
- (void)getWithXmlns:(NSString * _Nonnull)xmlns;
- (void)writeNicknames;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithDispatchQueue:(dispatch_queue_t _Nullable)queue OBJC_DESIGNATED_INITIALIZER;
@end


@interface XMPPPrivateXMLStorageManager (SWIFT_EXTENSION(ChatSDKXMPP)) <XMPPStreamDelegate>
- (BOOL)xmppStream:(XMPPStream * _Nonnull)sender didReceiveIQ:(XMPPIQ * _Nonnull)iq SWIFT_WARN_UNUSED_RESULT;
- (void)xmppStreamDidAuthenticate:(XMPPStream * _Nonnull)sender;
@end


SWIFT_CLASS("_TtC11ChatSDKXMPP22XMPPReadReceiptHandler")
@interface XMPPReadReceiptHandler : NSObject <PReadReceiptHandler>
- (void)setAutoSendReadReceipt:(BOOL)autoSend;
- (void)updateReadReceiptsForThread:(id <PThread> _Null_unspecified)thread;
- (void)markRead:(id <PThread> _Null_unspecified)thread;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC11ChatSDKXMPP21XMPPReadReceiptModule")
@interface XMPPReadReceiptModule : NSObject <PModule>
- (void)activate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSData;
@class NSURLSession;
@class NSURLAuthenticationChallenge;
@class NSURLCredential;
@class NSURLSessionTask;
@class NSURLRequest;
@class NSHTTPURLResponse;
@class NSInputStream;
@class NSURLSessionTaskMetrics;

SWIFT_CLASS("_TtC11ChatSDKXMPP17XMPPUploadHandler")
@interface XMPPUploadHandler : BAbstractUploadHandler <NSURLSessionTaskDelegate>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (RXPromise * _Null_unspecified)uploadFile:(NSData * _Null_unspecified)file withName:(NSString * _Null_unspecified)name mimeType:(NSString * _Null_unspecified)mimeType SWIFT_WARN_UNUSED_RESULT;
- (void)URLSession:(NSURLSession * _Nonnull)session didBecomeInvalidWithError:(NSError * _Nullable)error;
- (void)URLSession:(NSURLSession * _Nonnull)session didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
- (void)URLSessionDidFinishEventsForBackgroundURLSession:(NSURLSession * _Nonnull)session;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task willBeginDelayedRequest:(NSURLRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSURLSessionDelayedRequestDisposition, NSURLRequest * _Nullable))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session taskIsWaitingForConnectivity:(NSURLSessionTask * _Nonnull)task;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task willPerformHTTPRedirection:(NSHTTPURLResponse * _Nonnull)response newRequest:(NSURLRequest * _Nonnull)request completionHandler:(void (^ _Nonnull)(NSURLRequest * _Nullable))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didReceiveChallenge:(NSURLAuthenticationChallenge * _Nonnull)challenge completionHandler:(void (^ _Nonnull)(NSURLSessionAuthChallengeDisposition, NSURLCredential * _Nullable))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task needNewBodyStream:(void (^ _Nonnull)(NSInputStream * _Nullable))completionHandler;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didSendBodyData:(int64_t)bytesSent totalBytesSent:(int64_t)totalBytesSent totalBytesExpectedToSend:(int64_t)totalBytesExpectedToSend;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didFinishCollectingMetrics:(NSURLSessionTaskMetrics * _Nonnull)metrics;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didCompleteWithError:(NSError * _Nullable)error;
@end


SWIFT_CLASS("_TtC11ChatSDKXMPP16XMPPUploadModule")
@interface XMPPUploadModule : NSObject <PModule>
- (void)activate;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
