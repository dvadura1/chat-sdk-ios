// Generated by Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
#ifndef VIRGILSDK_SWIFT_H
#define VIRGILSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="VirgilSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class NSString;

/// This protocol represents Access Token
SWIFT_PROTOCOL_NAMED("AccessToken")
@protocol VSSAccessToken
/// Provides string representation of token
///
/// returns:
/// string with token
- (NSString * _Nonnull)stringRepresentation SWIFT_WARN_UNUSED_RESULT;
/// Extracts identity
///
/// returns:
/// identity
- (NSString * _Nonnull)identity SWIFT_WARN_UNUSED_RESULT;
@end

@class VSSTokenContext;

/// This protocol is responsible for providing AccessToken
SWIFT_PROTOCOL_NAMED("AccessTokenProvider")
@protocol VSSAccessTokenProvider
/// Provides access token
/// \param tokenContext <code>TokenContext</code>, provides context explaining why token is needed
///
/// \param completion Completion closure, called with access token or corresponding error
///
- (void)getTokenWith:(VSSTokenContext * _Nonnull)tokenContext completion:(void (^ _Nonnull)(id <VSSAccessToken> _Nullable, NSError * _Nullable))completion;
@end

@class NSNumber;

/// Class for AsyncOperations
SWIFT_CLASS("_TtC9VirgilSDK14AsyncOperation")
@interface AsyncOperation : NSOperation
/// Overrides Operation variable
@property (nonatomic, readonly, getter=isAsynchronous) BOOL asynchronous;
/// Overrides Operation variable
@property (nonatomic, readonly, getter=isExecuting) BOOL executing;
/// Overrides Operation variable
@property (nonatomic, readonly, getter=isFinished) BOOL finished;
/// Overrides Operation function
/// WARNING: You do not need override this function. Override main() func instead
- (void)start;
/// Implement your task here
- (void)main;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class NSURL;

/// Base class for clients
SWIFT_CLASS_NAMED("BaseClient")
@interface VSSBaseClient : NSObject
/// Base URL for a service
@property (nonatomic, readonly, copy) NSURL * _Nonnull serviceUrl;
/// Error domain for Error instances thrown from service
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull serviceErrorDomain;)
+ (NSString * _Nonnull)serviceErrorDomain SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Declares client error types and codes
/// <ul>
///   <li>
///     noBody: service response does not have body
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, VSSBaseClientError, "BaseClientError", closed) {
  VSSBaseClientErrorNoBody = 1,
};
static NSString * _Nonnull const VSSBaseClientErrorDomain = @"VirgilSDK.BaseClientError";

@class VSSJwt;

/// Implementation of AccessTokenProvider which provides AccessToken using cache+renew callback
SWIFT_CLASS_NAMED("CachingJwtProvider")
@interface VSSCachingJwtProvider : NSObject <VSSAccessTokenProvider>
/// Callback, which takes a TokenContext and completion handler
/// Completion handler should be called with either JWT, or Error
@property (nonatomic, readonly, copy) void (^ _Nonnull renewJwtCallback)(VSSTokenContext * _Nonnull, void (^ _Nonnull)(VSSJwt * _Nullable, NSError * _Nullable));
/// Initializer
/// \param initialJwt Initial jwt value
///
/// \param renewJwtCallback Callback, which takes a TokenContext and completion handler
/// Completion handler should be called with either JWT, or Error
///
- (nonnull instancetype)initWithInitialJwt:(VSSJwt * _Nullable)initialJwt renewJwtCallback:(void (^ _Nonnull)(VSSTokenContext * _Nonnull, void (^ _Nonnull)(VSSJwt * _Nullable, NSError * _Nullable)))renewJwtCallback OBJC_DESIGNATED_INITIALIZER;
/// Initializer
/// \param initialJwt Initial jwt value
///
/// \param renewTokenCallback Callback, which takes a TokenContext and completion handler
/// Completion handler should be called with either JWT String, or Error
///
- (nonnull instancetype)initWithInitialJwt:(VSSJwt * _Nullable)initialJwt renewTokenCallback:(void (^ _Nonnull)(VSSTokenContext * _Nonnull, void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable)))renewTokenCallback;
/// Provides access token using callback
/// \param tokenContext <code>TokenContext</code> provides context explaining why token is needed
///
/// \param completion completion closure
///
- (void)getTokenWith:(VSSTokenContext * _Nonnull)tokenContext completion:(void (^ _Nonnull)(id <VSSAccessToken> _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Implementation of AccessTokenProvider which provides AccessToken using callback
SWIFT_CLASS_NAMED("CallbackJwtProvider")
@interface VSSCallbackJwtProvider : NSObject <VSSAccessTokenProvider>
/// Callback, which takes a TokenContext and completion handler
/// Completion handler should be called with either JWT, or Error
@property (nonatomic, readonly, copy) void (^ _Nonnull getJwtCallback)(VSSTokenContext * _Nonnull, void (^ _Nonnull)(VSSJwt * _Nullable, NSError * _Nullable));
/// Initializer
/// \param getJwtCallback Callback, which takes a TokenContext and completion handler
/// Completion handler should be called with either JWT, or Error
///
- (nonnull instancetype)initWithGetJwtCallback:(void (^ _Nonnull)(VSSTokenContext * _Nonnull, void (^ _Nonnull)(VSSJwt * _Nullable, NSError * _Nullable)))getJwtCallback OBJC_DESIGNATED_INITIALIZER;
/// Initializer
/// \param getTokenCallback Callback, which takes a TokenContext and completion handler
/// Completion handler should be called with either JWT string, or Error
///
- (nonnull instancetype)initWithGetTokenCallback:(void (^ _Nonnull)(VSSTokenContext * _Nonnull, void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable)))getTokenCallback;
/// Provides access token using callback
/// \param tokenContext <code>TokenContext</code> provides context explaining why token is needed
///
/// \param completion completion closure
///
- (void)getTokenWith:(VSSTokenContext * _Nonnull)tokenContext completion:(void (^ _Nonnull)(id <VSSAccessToken> _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Declares error types and codes
/// <ul>
///   <li>
///     errorAndResultMissing: Both Result and Error are missing in callback
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, VSSCallbackOperationError, "CallbackOperationError", closed) {
  VSSCallbackOperationErrorErrorAndResultMissing = 1,
};
static NSString * _Nonnull const VSSCallbackOperationErrorDomain = @"VirgilSDK.CallbackOperationError";

@protocol VSAPublicKey;
@class NSDate;
@class VSSCardSignature;
@class NSData;
@class VSSRawSignedModel;

/// Class representing Virgil Card
SWIFT_CLASS_NAMED("Card")
@interface VSSCard : NSObject
/// Identifier of Virgil Card
/// note:
/// Is unique
@property (nonatomic, readonly, copy) NSString * _Nonnull identifier;
/// Virgil Card identity
@property (nonatomic, readonly, copy) NSString * _Nonnull identity;
/// PublicKey of Virgil Card
@property (nonatomic, readonly, strong) id <VSAPublicKey> _Nonnull publicKey;
/// Identifier of outdated previous Virgil Card with same identity
@property (nonatomic, readonly, copy) NSString * _Nullable previousCardId;
/// Previous Virgil Card instance
@property (nonatomic, strong) VSSCard * _Nullable previousCard;
/// True if Virgil Card is outdated, false otherwise
@property (nonatomic) BOOL isOutdated;
/// Version of Virgil Card
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
/// Creation date of Virgil Card
@property (nonatomic, readonly, copy) NSDate * _Nonnull createdAt;
/// Array with CardSignatures of Virgil Card
@property (nonatomic, readonly, copy) NSArray<VSSCardSignature *> * _Nonnull signatures;
/// Snapshot of corresponding <code>RawCardContent</code>
@property (nonatomic, readonly, copy) NSData * _Nonnull contentSnapshot;
/// Builds RawSignedModel representing Card
///
/// throws:
/// corresponding error
///
/// returns:
/// RawSignedModel representing Card
- (VSSRawSignedModel * _Nullable)getRawCardAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class representing operations with Virgil Cards service
SWIFT_CLASS_NAMED("CardClient")
@interface VSSCardClient : VSSBaseClient
/// Default URL for service
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSURL * _Nonnull defaultURL;)
+ (NSURL * _Nonnull)defaultURL SWIFT_WARN_UNUSED_RESULT;
/// Initializes a new <code>CardClient</code> instance
- (nonnull instancetype)init;
+ (nonnull instancetype)new;
/// Initializes a new <code>CardClient</code> instance
/// \param serviceUrl URL of service client will use
///
- (nonnull instancetype)initWithServiceUrl:(NSURL * _Nonnull)serviceUrl;
@end

@class VSSGetCardResponse;

/// Protocol for CardClient
/// See: CardClient for default implementation
SWIFT_PROTOCOL_NAMED("CardClientProtocol")
@protocol VSSCardClientProtocol
/// Returns <code>GetCardResponse</code> with <code>RawSignedModel</code> of card from the Virgil Cards Service with given ID, if exists
/// \param cardId String with unique Virgil Card identifier
///
/// \param token String with <code>Access Token</code>
///
///
/// throws:
/// Depends on implementation
///
/// returns:
/// <code>GetCardResponse</code> if card found
- (VSSGetCardResponse * _Nullable)getCardWithId:(NSString * _Nonnull)cardId token:(NSString * _Nonnull)token error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Creates Virgil Card instance on the Virgil Cards Service
/// Also makes the Card accessible for search/get queries from other users
/// <code>RawSignedModel</code> should contain appropriate signatures
/// \param model Signed <code>RawSignedModel</code>
///
/// \param token String with <code>Access Token</code>
///
///
/// throws:
/// Depends on implementation
///
/// returns:
/// <code>RawSignedModel</code> of created card
- (VSSRawSignedModel * _Nullable)publishCardWithModel:(VSSRawSignedModel * _Nonnull)model token:(NSString * _Nonnull)token error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Performs search of Virgil Cards using given identity on the Virgil Cards Service
/// \param identity Identity of cards to search
///
/// \param token String with <code>Access Token</code>
///
///
/// throws:
/// Depends on implementation
///
/// returns:
/// Array with <code>RawSignedModel</code>s of matched Virgil Cards
- (NSArray<VSSRawSignedModel *> * _Nullable)searchCardsWithIdentity:(NSString * _Nonnull)identity token:(NSString * _Nonnull)token error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Deprecated in favor of searchCards with array of identities");
/// Performs search of Virgil Cards using given identities on the Virgil Cards Service
/// \param identities Identities of cards to search
///
/// \param token String with <code>Access Token</code>
///
///
/// throws:
/// Depends on implementation
///
/// returns:
/// Array with <code>RawSignedModel</code>s of matched Virgil Cards
- (NSArray<VSSRawSignedModel *> * _Nullable)searchCardsWithIdentities:(NSArray<NSString *> * _Nonnull)identities token:(NSString * _Nonnull)token error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Revokes card. Revoked card gets isOutdated flag to be set to true.
/// Also, such cards could be obtained using get query, but will be absent in search query result.
/// \param cardId identifier of card to revoke
///
/// \param token String with <code>Access Token</code>
///
///
/// throws:
/// Depends on implementation
- (BOOL)revokeCardWithId:(NSString * _Nonnull)cardId token:(NSString * _Nonnull)token error:(NSError * _Nullable * _Nullable)error;
@end


@interface VSSCardClient (SWIFT_EXTENSION(VirgilSDK)) <VSSCardClientProtocol>
/// HTTP header key for getCard response that marks outdated cards
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull xVirgilIsSuperseededKey;)
+ (NSString * _Nonnull)xVirgilIsSuperseededKey SWIFT_WARN_UNUSED_RESULT;
/// HTTP header value for xVirgilIsSuperseededKey key for getCard response that marks outdated cards
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull xVirgilIsSuperseededTrue;)
+ (NSString * _Nonnull)xVirgilIsSuperseededTrue SWIFT_WARN_UNUSED_RESULT;
/// Returns <code>GetCardResponse</code> with <code>RawSignedModel</code> of card from the Virgil Cards Service with given ID, if exists
/// \param cardId String with unique Virgil Card identifier
///
/// \param token String with <code>Access Token</code>
///
///
/// throws:
/// CardClientError.constructingUrl, if url initialization failed
/// CardServiceError, if service returned correctly-formed error json
/// NSError with CardClient.serviceErrorDomain error domain,
/// http status code as error code, and description string if present in http body
/// Rethrows from ServiceRequest, HttpConnectionProtocol, JsonDecoder, BaseClient
///
/// returns:
/// <code>GetCardResponse</code> if card found
- (VSSGetCardResponse * _Nullable)getCardWithId:(NSString * _Nonnull)cardId token:(NSString * _Nonnull)token error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Creates Virgil Card instance on the Virgil Cards Service
/// Also makes the Card accessible for search/get queries from other users
/// <code>RawSignedModel</code> should contain appropriate signatures
/// \param model Signed <code>RawSignedModel</code>
///
/// \param token String with <code>Access Token</code>
///
///
/// throws:
/// CardClientError.constructingUrl, if url initialization failed
/// CardServiceError, if service returned correctly-formed error json
/// NSError with CardClient.serviceErrorDomain error domain,
/// http status code as error code, and description string if present in http body
/// Rethrows from ServiceRequest, HttpConnectionProtocol, JsonDecoder, BaseClient
///
/// returns:
/// <code>RawSignedModel</code> of created card
- (VSSRawSignedModel * _Nullable)publishCardWithModel:(VSSRawSignedModel * _Nonnull)model token:(NSString * _Nonnull)token error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Performs search of Virgil Cards using given identity on the Virgil Cards Service
/// \param identity Identity of cards to search
///
/// \param token String with <code>Access Token</code>
///
///
/// throws:
/// CardClientError.constructingUrl, if url initialization failed
/// CardServiceError, if service returned correctly-formed error json
/// NSError with CardClient.serviceErrorDomain error domain,
/// http status code as error code, and description string if present in http body
/// Rethrows from ServiceRequest, HttpConnectionProtocol, JsonDecoder, BaseClient
///
/// returns:
/// Array with <code>RawSignedModel</code>s of matched Virgil Cards
- (NSArray<VSSRawSignedModel *> * _Nullable)searchCardsWithIdentity:(NSString * _Nonnull)identity token:(NSString * _Nonnull)token error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT SWIFT_DEPRECATED_MSG("Deprecated in favor of searchCards with array of identities");
/// Performs search of Virgil Cards using given identities on the Virgil Cards Service
/// \param identities Identities of cards to search
///
/// \param token String with <code>Access Token</code>
///
///
/// throws:
/// CardClientError.constructingUrl, if url initialization failed
/// CardServiceError, if service returned correctly-formed error json
/// NSError with CardClient.serviceErrorDomain error domain,
/// http status code as error code, and description string if present in http body
/// Rethrows from ServiceRequest, HttpConnectionProtocol, JsonDecoder, BaseClient
///
/// returns:
/// Array with <code>RawSignedModel</code>s of matched Virgil Cards
- (NSArray<VSSRawSignedModel *> * _Nullable)searchCardsWithIdentities:(NSArray<NSString *> * _Nonnull)identities token:(NSString * _Nonnull)token error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Revokes card. Revoked card gets isOutdated flag to be set to true.
/// Also, such cards could be obtained using get query, but will be absent in search query result.
/// \param cardId identifier of card to revoke
///
/// \param token String with <code>Access Token</code>
///
///
/// throws:
/// CardClientError.constructingUrl, if url initialization failed
/// CardServiceError, if service returned correctly-formed error json
/// NSError with CardClient.serviceErrorDomain error domain,
/// http status code as error code, and description string if present in http body
/// Rethrows from ServiceRequest, HttpConnectionProtocol, JsonDecoder, BaseClient
- (BOOL)revokeCardWithId:(NSString * _Nonnull)cardId token:(NSString * _Nonnull)token error:(NSError * _Nullable * _Nullable)error;
@end

/// Declares client error types and codes
/// <ul>
///   <li>
///     constructingUrl: constructing url of endpoint failed
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, VSSCardClientError, "CardClientError", closed) {
  VSSCardClientErrorConstructingUrl = 1,
};
static NSString * _Nonnull const VSSCardClientErrorDomain = @"VirgilSDK.CardClientError";


@class VSSModelSigner;
@protocol VSACardCrypto;
@protocol VSSCardVefifier;
@class VSSCardManagerParams;

/// Class responsible for operations with Virgil Cards
SWIFT_CLASS_NAMED("CardManager")
@interface VSSCardManager : NSObject
/// ModelSigner instance used for self signing Cards
@property (nonatomic, readonly, strong) VSSModelSigner * _Nonnull modelSigner;
/// CardCrypto instance
@property (nonatomic, readonly, strong) id <VSACardCrypto> _Nonnull cardCrypto;
/// AccessTokenProvider instance used for getting Access Token
/// when performing queries
@property (nonatomic, readonly, strong) id <VSSAccessTokenProvider> _Nonnull accessTokenProvider;
/// CardClient instance used for performing queries
@property (nonatomic, readonly, strong) id <VSSCardClientProtocol> _Nonnull cardClient;
/// Card Verifier instance used for verifying Cards
@property (nonatomic, readonly, strong) id <VSSCardVefifier> _Nonnull cardVerifier;
/// Will automatically perform second query with forceReload = true AccessToken if true
@property (nonatomic, readonly) BOOL retryOnUnauthorized;
/// Called to perform additional signatures for card before publishing
@property (nonatomic, readonly, copy) void (^ _Nullable signCallback)(VSSRawSignedModel * _Nonnull, void (^ _Nonnull)(VSSRawSignedModel * _Nullable, NSError * _Nullable));
/// Initializer
/// \param params CardManagerParams with needed parameters
///
- (nonnull instancetype)initWithParams:(VSSCardManagerParams * _Nonnull)params OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface VSSCardManager (SWIFT_EXTENSION(VirgilSDK))
/// Imports Virgil Card from RawSignedModel
/// \param cardCrypto <code>CardCrypto</code> instance
///
/// \param rawSignedModel RawSignedModel to import
///
///
/// throws:
/// corresponding error
///
/// returns:
/// imported Card
+ (VSSCard * _Nullable)parseCardFrom:(VSSRawSignedModel * _Nonnull)rawSignedModel cardCrypto:(id <VSACardCrypto> _Nonnull)cardCrypto error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Imports Virgil Card from RawSignedModel using self CardCrypto instance
/// \param rawSignedModel RawSignedModel to import
///
///
/// throws:
/// corresponding error
///
/// returns:
/// imported Card
- (VSSCard * _Nullable)parseCardFrom:(VSSRawSignedModel * _Nonnull)rawSignedModel error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


@interface VSSCardManager (SWIFT_EXTENSION(VirgilSDK))
/// Imports and verifies Card from base64 encoded string
/// \param base64EncodedString base64 encoded string with Card
///
///
/// throws:
/// CardManagerError.cardIsNotVerified, if Card verificaction has failed
/// Rethrows from RawSignedModel, JSONDecoder, CardCrypto
///
/// returns:
/// imported and verified Card
- (VSSCard * _Nullable)importCardFromBase64Encoded:(NSString * _Nonnull)base64EncodedString error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Imports and verifies Card from json Dictionary
/// \param json json Dictionary
///
///
/// throws:
/// CardManagerError.cardIsNotVerified, if Card verificaction has failed
/// Rethrows from RawSignedModel, JSONDecoder, CardCrypto, JSONSerialization
///
/// returns:
/// imported and verified Card
- (VSSCard * _Nullable)importCardFromJson:(id _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Imports and verifies Card from RawSignedModel
/// \param rawCard RawSignedModel
///
///
/// throws:
/// CardManagerError.cardIsNotVerified, if Card verificaction has failed
/// Rethrows from RawSignedModel, JSONDecoder, CardCrypto, JSONSerialization
///
/// returns:
/// imported and verified Card
- (VSSCard * _Nullable)importCardFromRawCard:(VSSRawSignedModel * _Nonnull)rawCard error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Exports Card as base64 encoded string
/// \param card Card to be exported
///
///
/// throws:
/// CardManagerError.cardIsNotVerified, if Card verificaction has failed
/// Rethrows from RawSignedModel, JSOEncoder, CardCrypto
///
/// returns:
/// base64 encoded string with Card
- (NSString * _Nullable)exportCardAsBase64EncodedString:(VSSCard * _Nonnull)card error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Exports Card as json Dictionary
/// \param card Card to be exported
///
///
/// throws:
/// CardManagerError.cardIsNotVerified, if Card verificaction has failed
/// Rethrows from RawSignedModel, JSOEncoder, CardCrypto, JSONSerialization
///
/// returns:
/// json Dictionary with Card
- (id _Nullable)exportCardAsJson:(VSSCard * _Nonnull)card error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Exports Card as RawSignedModel
/// \param card Card to be exported
///
///
/// throws:
/// CardManagerError.cardIsNotVerified, if Card verificaction has failed
/// Rethrows from RawSignedModel, JSOEncoder, CardCrypto
///
/// returns:
/// RawSignedModel representing Card
- (VSSRawSignedModel * _Nullable)exportCardAsRawCard:(VSSCard * _Nonnull)card error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

@protocol VSAPrivateKey;

@interface VSSCardManager (SWIFT_EXTENSION(VirgilSDK))
/// Asynchronously returns <code>Card</code> with given identifier
/// from the Virgil Cards Service with given ID, if exists
/// NOTE: See swift version for additional info
/// \param cardId string with unique Virgil Card identifier
///
/// \param completion completion handler, called with found and verified Card or corresponding error
///
- (void)getCardWithId:(NSString * _Nonnull)cardId completion:(void (^ _Nonnull)(VSSCard * _Nullable, NSError * _Nullable))completion;
/// Asynchronously creates Virgil Card instance on the Virgil Cards Service and associates it with unique identifier
/// Also makes the Card accessible for search/get queries from other users
/// <code>RawSignedModel</code> should be at least selfSigned
/// NOTE: See swift version for additional info
/// \param rawCard self signed <code>RawSignedModel</code>
///
/// \param completion completion handler, called with published and verified Card or corresponding error
///
- (void)publishCardWithRawCard:(VSSRawSignedModel * _Nonnull)rawCard completion:(void (^ _Nonnull)(VSSCard * _Nullable, NSError * _Nullable))completion;
/// Asynchronously generates self signed RawSignedModel and creates Virgil Card
/// instance on the Virgil Cards Service and associates it with unique identifier
/// NOTE: See swift version for additional info
/// \param privateKey Private Key to self sign RawSignedModel with
///
/// \param publicKey PublicKey for generating RawSignedModel
///
/// \param identity identity for generating RawSignedModel. Will be taken from token if omitted
///
/// \param previousCardId identifier of Virgil Card to replace
///
/// \param extraFields Dictionary with extra data to sign with model
///
/// \param completion completion handler, called with published and verified Card or corresponding error
///
- (void)publishCardWithPrivateKey:(id <VSAPrivateKey> _Nonnull)privateKey publicKey:(id <VSAPublicKey> _Nonnull)publicKey identity:(NSString * _Nonnull)identity previousCardId:(NSString * _Nullable)previousCardId extraFields:(NSDictionary<NSString *, NSString *> * _Nullable)extraFields completion:(void (^ _Nonnull)(VSSCard * _Nullable, NSError * _Nullable))completion;
/// Asynchronously performs search of Virgil Cards using identity on the Virgil Cards Service
/// NOTE: See swift version for additional info
/// \param identity identity of cards to search
///
/// \param completion completion handler, called with found and verified Cards or corresponding error
///
- (void)searchCardsWithIdentity:(NSString * _Nonnull)identity completion:(void (^ _Nonnull)(NSArray<VSSCard *> * _Nullable, NSError * _Nullable))completion;
/// Asynchronously performs search of Virgil Cards on the Virgil Cards Service using identities
/// NOTE: See swift version for additional info
/// \param identities identities of cards to search
///
/// \param completion completion handler, called with found and verified Cards or corresponding error
///
- (void)searchCardsWithIdentities:(NSArray<NSString *> * _Nonnull)identities completion:(void (^ _Nonnull)(NSArray<VSSCard *> * _Nullable, NSError * _Nullable))completion;
/// Makes CallbackOperation<Void> for performing revokation of Virgil Card
/// Revoked card gets isOutdated flag to be set to true.
/// Also, such cards could be obtained using get query, but will be absent in search query result.
/// \param cardId identifier of card to revoke
///
/// \param completion completion handler, called with corresponding error if any occured
///
- (void)revokeCardWithId:(NSString * _Nonnull)cardId completion:(void (^ _Nonnull)(NSError * _Nullable))completion;
@end


@interface VSSCardManager (SWIFT_EXTENSION(VirgilSDK))
/// Imports and verifies Card from base64 encoded string
/// \param base64EncodedString base64 encoded string with Card
///
/// \param cardCrypto CardCrypto implementation
///
/// \param cardVerifier CardVerifier implementation
///
///
/// throws:
/// CardManagerError.cardIsNotVerified, if Card verificaction has failed
/// Rethrows from RawSignedModel, JSONDecoder, CardCrypto
///
/// returns:
/// imported and verified Card
+ (VSSCard * _Nullable)importCardFromBase64Encoded:(NSString * _Nonnull)base64EncodedString cardCrypto:(id <VSACardCrypto> _Nonnull)cardCrypto cardVerifier:(id <VSSCardVefifier> _Nonnull)cardVerifier error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Imports and verifies Card from json Dictionary
/// \param json json Dictionary
///
/// \param cardCrypto CardCrypto implementation
///
/// \param cardVerifier CardVerifier implementation
///
///
/// throws:
/// CardManagerError.cardIsNotVerified, if Card verificaction has failed
/// Rethrows from RawSignedModel, JSONDecoder, CardCrypto, JSONSerialization
///
/// returns:
/// imported and verified Card
+ (VSSCard * _Nullable)importCardFromJson:(id _Nonnull)json cardCrypto:(id <VSACardCrypto> _Nonnull)cardCrypto cardVerifier:(id <VSSCardVefifier> _Nonnull)cardVerifier error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Imports and verifies Card from RawSignedModel
/// \param rawCard RawSignedModel
///
/// \param cardCrypto CardCrypto implementation
///
/// \param cardVerifier CardVerifier implementation
///
///
/// throws:
/// CardManagerError.cardIsNotVerified, if Card verificaction has failed
/// Rethrows from RawSignedModel, JSONDecoder, CardCrypto, JSONSerialization
///
/// returns:
/// imported and verified Card
+ (VSSCard * _Nullable)importCardFromRawCard:(VSSRawSignedModel * _Nonnull)rawCard cardCrypto:(id <VSACardCrypto> _Nonnull)cardCrypto cardVerifier:(id <VSSCardVefifier> _Nonnull)cardVerifier error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Exports Card as base64 encoded string
/// \param card Card to be exported
///
///
/// throws:
/// CardManagerError.cardIsNotVerified, if Card verificaction has failed
/// Rethrows from RawSignedModel, JSOEncoder, CardCrypto
///
/// returns:
/// base64 encoded string with Card
+ (NSString * _Nullable)exportCardAsBase64EncodedString:(VSSCard * _Nonnull)card error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Exports Card as json Dictionary
/// \param card Card to be exported
///
///
/// throws:
/// CardManagerError.cardIsNotVerified, if Card verificaction has failed
/// Rethrows from RawSignedModel, JSOEncoder, CardCrypto, JSONSerialization
///
/// returns:
/// json Dictionary with Card
+ (id _Nullable)exportCardAsJson:(VSSCard * _Nonnull)card error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Exports Card as RawSignedModel
/// \param card Card to be exported
///
///
/// throws:
/// CardManagerError.cardIsNotVerified, if Card verificaction has failed
/// Rethrows from RawSignedModel, JSOEncoder, CardCrypto
///
/// returns:
/// RawSignedModel representing Card
+ (VSSRawSignedModel * _Nullable)exportCardAsRawCard:(VSSCard * _Nonnull)card error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


@interface VSSCardManager (SWIFT_EXTENSION(VirgilSDK))
/// Generates self signed RawSignedModel
/// \param privateKey PrivateKey to self sign with
///
/// \param publicKey Public Key instance
///
/// \param identity Card’s identity
///
/// \param previousCardId Identifier of Virgil Card with same identity this Card will replace
///
/// \param extraFields Dictionary with extra data to sign with model. Should be JSON-compatible
///
///
/// throws:
/// Rethrows from CardCrypto, JSONEncoder, JSONSerialization, ModelSigner
///
/// returns:
/// Self signed RawSignedModel
- (VSSRawSignedModel * _Nullable)generateRawCardWithPrivateKey:(id <VSAPrivateKey> _Nonnull)privateKey publicKey:(id <VSAPublicKey> _Nonnull)publicKey identity:(NSString * _Nonnull)identity previousCardId:(NSString * _Nullable)previousCardId extraFields:(NSDictionary<NSString *, NSString *> * _Nullable)extraFields error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Generates self signed RawSignedModel
/// \param cardCrypto CardCrypto implementation
///
/// \param modelSigner ModelSigner implementation
///
/// \param privateKey PrivateKey to self sign with
///
/// \param publicKey Public Key instance
///
/// \param identity Card’s identity
///
/// \param previousCardId Identifier of Virgil Card with same identity this Card will replace
///
/// \param extraFields Dictionary with extra data to sign with model. Should be JSON-compatible
///
///
/// throws:
/// Rethrows from CardCrypto, JSONEncoder, JSONSerialization, ModelSigner
///
/// returns:
/// Self signed RawSignedModel
+ (VSSRawSignedModel * _Nullable)generateRawCardWithCardCrypto:(id <VSACardCrypto> _Nonnull)cardCrypto modelSigner:(VSSModelSigner * _Nonnull)modelSigner privateKey:(id <VSAPrivateKey> _Nonnull)privateKey publicKey:(id <VSAPublicKey> _Nonnull)publicKey identity:(NSString * _Nonnull)identity previousCardId:(NSString * _Nullable)previousCardId extraFields:(NSDictionary<NSString *, NSString *> * _Nullable)extraFields error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// Declares error types and codes for CardManager
/// <ul>
///   <li>
///     cardIsNotVerified: Virgil Card was not verified by cardVerifier
///   </li>
///   <li>
///     gotWrongCard: Response Card doesn’t match to what was queried
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, VSSCardManagerError, "CardManagerError", closed) {
  VSSCardManagerErrorCardIsNotVerified = 1,
  VSSCardManagerErrorGotWrongCard = 2,
};
static NSString * _Nonnull const VSSCardManagerErrorDomain = @"VirgilSDK.CardManagerError";


/// Contains parameters for initializing CardManager
SWIFT_CLASS_NAMED("CardManagerParams")
@interface VSSCardManagerParams : NSObject
/// CardCrypto instance
@property (nonatomic, readonly, strong) id <VSACardCrypto> _Nonnull cardCrypto;
/// AccessTokenProvider instance used for getting Access Token
/// when performing queries
@property (nonatomic, readonly, strong) id <VSSAccessTokenProvider> _Nonnull accessTokenProvider;
/// Card Verifier instance used for verifying Cards
@property (nonatomic, readonly, strong) id <VSSCardVefifier> _Nonnull cardVerifier;
/// ModelSigner instance used for self signing Cards
@property (nonatomic, strong) VSSModelSigner * _Nonnull modelSigner;
/// CardClient instance used for performing queries
@property (nonatomic, strong) id <VSSCardClientProtocol> _Nonnull cardClient;
/// Callback used for custom signing RawSignedModel, which takes RawSignedModel
/// to sign and competion handler, called with signed RawSignedModel or provided error
@property (nonatomic, copy) void (^ _Nullable signCallback)(VSSRawSignedModel * _Nonnull, void (^ _Nonnull)(VSSRawSignedModel * _Nullable, NSError * _Nullable));
/// Will automatically perform second query with forceReload = true AccessToken if true
@property (nonatomic) BOOL retryOnUnauthorized;
/// Initializer
/// \param cardCrypto CardCrypto instance
///
/// \param accessTokenProvider AccessTokenProvider instance for getting Access Token
/// when performing queries
///
/// \param cardVerifier Card Verifier instance for verifyng Cards
///
- (nonnull instancetype)initWithCardCrypto:(id <VSACardCrypto> _Nonnull)cardCrypto accessTokenProvider:(id <VSSAccessTokenProvider> _Nonnull)accessTokenProvider cardVerifier:(id <VSSCardVefifier> _Nonnull)cardVerifier OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class representing Virgil Card Signature
SWIFT_CLASS_NAMED("CardSignature")
@interface VSSCardSignature : NSObject
/// Identifier of signer
/// important:
/// Must be unique. Reserved values:
/// <ul>
///   <li>
///     Self signatures: “self”
///   </li>
///   <li>
///     Virgil Service signatures: “virgil”
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSString * _Nonnull signer;
/// Signature data
@property (nonatomic, readonly, copy) NSData * _Nonnull signature;
/// Additional data
@property (nonatomic, readonly, copy) NSData * _Nullable snapshot;
/// Dictionary with additional data
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable extraFields;
/// Initializer
/// \param signer identifier of signer
///
/// \param signature signature data
///
/// \param snapshot additional data
///
/// \param extraFields dictionary with additional data
///
- (nonnull instancetype)initWithSigner:(NSString * _Nonnull)signer signature:(NSData * _Nonnull)signature snapshot:(NSData * _Nullable)snapshot extraFields:(NSDictionary<NSString *, NSString *> * _Nullable)extraFields OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Protocol representing Card verification process.
SWIFT_PROTOCOL_NAMED("CardVerifier")
@protocol VSSCardVefifier
/// Verifies Card instance
/// \param card Card to verify
///
///
/// returns:
/// true if Card verified, false otherwise
- (BOOL)verifyCard:(VSSCard * _Nonnull)card SWIFT_WARN_UNUSED_RESULT;
@end


/// Implementation of AccessTokenProvider which provides constant AccessToken
SWIFT_CLASS_NAMED("ConstAccessTokenProvider")
@interface VSSConstAccessTokenProvider : NSObject <VSSAccessTokenProvider>
/// AccessToken
@property (nonatomic, readonly, strong) id <VSSAccessToken> _Nonnull accessToken;
/// Initializer
/// \param accessToken Access Token
///
- (nonnull instancetype)initWithAccessToken:(id <VSSAccessToken> _Nonnull)accessToken OBJC_DESIGNATED_INITIALIZER;
/// Provides cached access token
/// \param tokenContext do not have any influence on result in this implementation
///
/// \param completion completion closure, called with cashed access token
///
- (void)getTokenWith:(VSSTokenContext * _Nonnull)tokenContext completion:(void (^ _Nonnull)(id <VSSAccessToken> _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class VSSJwtGenerator;

/// Implementation of AccessTokenProvider which provides generated JWTs
SWIFT_CLASS_NAMED("GeneratorJwtProvider")
@interface VSSGeneratorJwtProvider : NSObject <VSSAccessTokenProvider>
/// JwtGeneretor for generating new tokens
@property (nonatomic, readonly, strong) VSSJwtGenerator * _Nonnull jwtGenerator;
/// Identity that will be used for generating token if tokenContext do not have it (e.g. for read operations)
/// WARNING: Do not create cards with defaultIdentity
@property (nonatomic, readonly, copy) NSString * _Nonnull defaultIdentity;
/// Additional data, that will be present in token
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable additionalData;
/// Initializer
/// \param jwtGenerator <code>JwtGenerator</code> instance for generating new tokens
///
/// \param defaultIdentity Identity that will be used for generating token
/// if tokenContext do not have it (e.g. for read operations)
/// WARNING: Do not create cards with defaultIdentity
///
/// \param additionalData Additional data, that will be present in token
///
- (nonnull instancetype)initWithJwtGenerator:(VSSJwtGenerator * _Nonnull)jwtGenerator defaultIdentity:(NSString * _Nonnull)defaultIdentity additionalData:(NSDictionary<NSString *, NSString *> * _Nullable)additionalData OBJC_DESIGNATED_INITIALIZER;
/// Provides new generated JWT
/// \param tokenContext <code>TokenContext</code>, provides context explaining why token is needed
///
/// \param completion completion closure, called with access token or corresponding error
///
- (void)getTokenWith:(VSSTokenContext * _Nonnull)tokenContext completion:(void (^ _Nonnull)(id <VSSAccessToken> _Nullable, NSError * _Nullable))completion;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Declares error types and codes
/// <ul>
///   <li>
///     timeout: Timeout has fired
///   </li>
///   <li>
///     resultIsMissing: Result variable is empty after execution
///   </li>
///   <li>
///     missingDependencies: Dependend operation result not found
///   </li>
///   <li>
///     dependencyFailed: Dependend operation has failed
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, VSSGenericOperationError, "GenericOperationError", closed) {
  VSSGenericOperationErrorTimeout = 1,
  VSSGenericOperationErrorResultIsMissing = 2,
  VSSGenericOperationErrorMissingDependencies = 3,
  VSSGenericOperationErrorDependencyFailed = 4,
};
static NSString * _Nonnull const VSSGenericOperationErrorDomain = @"VirgilSDK.GenericOperationError";


/// Represents response from CardClient’s getCard function with RawSignedModel and whether or not card is outdated
SWIFT_CLASS_NAMED("GetCardResponse")
@interface VSSGetCardResponse : NSObject
/// RawSignedModel of Virgil Card
@property (nonatomic, readonly, strong) VSSRawSignedModel * _Nonnull rawCard;
/// True if Virgil Card is outdated, false - otherwise
@property (nonatomic, readonly) BOOL isOutdated;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class VSSJwtHeaderContent;
@class VSSJwtBodyContent;
@class VSSJwtSignatureContent;

/// Class implementing <code>AccessToken</code> in terms of Virgil JWT
SWIFT_CLASS_NAMED("Jwt")
@interface VSSJwt : NSObject <VSSAccessToken>
/// Represents JWT Header content
@property (nonatomic, readonly, strong) VSSJwtHeaderContent * _Nonnull headerContent;
/// Represents JWT Body content
@property (nonatomic, readonly, strong) VSSJwtBodyContent * _Nonnull bodyContent;
/// Represents JWT Signature content
@property (nonatomic, readonly, strong) VSSJwtSignatureContent * _Nonnull signatureContent;
/// Initializes <code>Jwt</code> with provided header, body and signature content
/// \param headerContent header of <code>Jwt</code>
///
/// \param bodyContent body of <code>Jwt</code>
///
/// \param signatureContent signature of <code>Jwt</code>
///
- (nullable instancetype)initWithHeaderContent:(VSSJwtHeaderContent * _Nonnull)headerContent bodyContent:(VSSJwtBodyContent * _Nonnull)bodyContent signatureContent:(VSSJwtSignatureContent * _Nonnull)signatureContent error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Initializes <code>Jwt</code> from its string representation
/// \param stringRepresentation must be equal to
/// base64UrlEncode(JWT Header) + “.” + base64UrlEncode(JWT Body)
/// + “.” + base64UrlEncode(Jwt Signature)
///
- (nullable instancetype)initWithStringRepresentation:(NSString * _Nonnull)stringRepresentation error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Returns JWT data that should be signed
///
/// throws:
/// JwtError.utf8StrIsInvalid if utf8 string is invalid
///
/// returns:
/// JWT data that should be signed
- (NSData * _Nullable)dataToSignAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Returns JWT data that should be signed
/// \param headerContent JWT header
///
/// \param bodyContent JWT body
///
///
/// throws:
/// JwtError.utf8StrIsInvalid if utf8 string is invalid
///
/// returns:
/// JWT data that should be signed
+ (NSData * _Nullable)dataToSignWithHeaderContent:(VSSJwtHeaderContent * _Nonnull)headerContent bodyContent:(VSSJwtBodyContent * _Nonnull)bodyContent error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Provides string representation of token
///
/// returns:
/// string representation of token
- (NSString * _Nonnull)stringRepresentation SWIFT_WARN_UNUSED_RESULT;
/// Extracts identity
///
/// returns:
/// identity
- (NSString * _Nonnull)identity SWIFT_WARN_UNUSED_RESULT;
/// Returns whether or not token is expired
/// \param date current date
///
///
/// returns:
/// true if token is expired, false otherwise
- (BOOL)isExpiredWithDate:(NSDate * _Nonnull)date SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class representing JWT Body content
SWIFT_CLASS_NAMED("JwtBodyContent")
@interface VSSJwtBodyContent : NSObject
/// Issuer containing application id
/// note:
/// Can be taken <a href="https://dashboard.virgilsecurity.com">here</a>
@property (nonatomic, readonly, copy) NSString * _Nonnull appId;
/// Subject as identity
@property (nonatomic, readonly, copy) NSString * _Nonnull identity;
/// Timestamp in seconds with expiration date
@property (nonatomic, readonly, copy) NSDate * _Nonnull expiresAt;
/// Timestamp in seconds with issued date
@property (nonatomic, readonly, copy) NSDate * _Nonnull issuedAt;
/// Dictionary with additional data
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable additionalData;
/// String representation
@property (nonatomic, readonly, copy) NSString * _Nonnull stringRepresentation;
/// Initializer
/// \param appId Issuer containing application id. Can be taken <a href="https://dashboard.virgilsecurity.com">here</a>
///
/// \param identity identity (must be equal to RawSignedModel identity when publishing card)
///
/// \param expiresAt expiration date
///
/// \param issuedAt issued date
///
/// \param additionalData dictionary with additional data
///
///
/// throws:
/// Rethrows from JSONEncoder
- (nullable instancetype)initWithAppId:(NSString * _Nonnull)appId identity:(NSString * _Nonnull)identity expiresAt:(NSDate * _Nonnull)expiresAt issuedAt:(NSDate * _Nonnull)issuedAt additionalData:(NSDictionary<NSString *, NSString *> * _Nullable)additionalData error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Imports JwtBodyContent from base64Url encoded string
/// \param base64UrlEncoded base64Url encoded string with JwtBodyContent
///
///
/// throws:
/// JwtBodyContentError.base64UrlStrIsInvalid If given base64 string is invalid
/// Rethrows from JSONDencoder
- (nullable instancetype)initWithBase64UrlEncoded:(NSString * _Nonnull)base64UrlEncoded error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Declares error types and codes
/// <ul>
///   <li>
///     base64UrlStrIsInvalid: If given base64 string is invalid
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, VSSJwtBodyContentError, "JwtBodyContentError", closed) {
  VSSJwtBodyContentErrorBase64UrlStrIsInvalid = 1,
};
static NSString * _Nonnull const VSSJwtBodyContentErrorDomain = @"VirgilSDK.JwtBodyContentError";

/// Declares error types and codes
/// <ul>
///   <li>
///     incorrectNumberOfJwtComponents: Number of JWT components doesn’t equal 3
///   </li>
///   <li>
///     utf8StrIsInvalid: Invalid UTF8 string to sign
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, VSSJwtError, "JwtError", closed) {
  VSSJwtErrorIncorrectNumberOfJwtComponents = 1,
  VSSJwtErrorUtf8StrIsInvalid = 2,
};
static NSString * _Nonnull const VSSJwtErrorDomain = @"VirgilSDK.JwtError";

@protocol VSAAccessTokenSigner;

/// Class responsible for JWT generation
SWIFT_CLASS_NAMED("JwtGenerator")
@interface VSSJwtGenerator : NSObject
/// Api Private Key for signing generated tokens
/// note:
/// Can be taken <a href="https://dashboard.virgilsecurity.com/api-keys">here</a>
@property (nonatomic, readonly, strong) id <VSAPrivateKey> _Nonnull apiKey;
/// Public Key identifier of Api Key
/// note:
/// Can be taken <a href="https://dashboard.virgilsecurity.com/api-keys">here</a>
@property (nonatomic, readonly, copy) NSString * _Nonnull apiPublicKeyIdentifier;
/// Implementation of AccessTokenSigner for signing generated tokens
@property (nonatomic, readonly, strong) id <VSAAccessTokenSigner> _Nonnull accessTokenSigner;
/// Application Id
/// note:
/// Can be taken <a href="https://dashboard.virgilsecurity.com">here</a>
@property (nonatomic, readonly, copy) NSString * _Nonnull appId;
/// Lifetime of generated tokens
@property (nonatomic, readonly) NSTimeInterval ttl;
/// Initializer
/// \param apiKey Api Private Key for signing generated tokens
///
/// \param apiPublicKeyIdentifier Public Key identifier of Api Key
///
/// \param accessTokenSigner implementation of AccessTokenSigner for signing generated tokens
///
/// \param appId Application Id
///
/// \param ttl Lifetime of generated tokens
///
- (nonnull instancetype)initWithApiKey:(id <VSAPrivateKey> _Nonnull)apiKey apiPublicKeyIdentifier:(NSString * _Nonnull)apiPublicKeyIdentifier accessTokenSigner:(id <VSAAccessTokenSigner> _Nonnull)accessTokenSigner appId:(NSString * _Nonnull)appId ttl:(NSTimeInterval)ttl OBJC_DESIGNATED_INITIALIZER;
/// Generates new JWT
/// \param identity Identity to generate with
///
/// \param additionalData Dictionary with additional data
///
///
/// throws:
/// Rethrows from JwtHeaderContent, JwtBodyContent, Jwt, AccessTokenSigner
///
/// returns:
/// Generated and signed <code>Jwt</code>
- (VSSJwt * _Nullable)generateTokenWithIdentity:(NSString * _Nonnull)identity additionalData:(NSDictionary<NSString *, NSString *> * _Nullable)additionalData error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class representing JWT Header content
SWIFT_CLASS_NAMED("JwtHeaderContent")
@interface VSSJwtHeaderContent : NSObject
/// Represents used signature algorithm
@property (nonatomic, readonly, copy) NSString * _Nonnull algorithm;
/// Represents token type
@property (nonatomic, readonly, copy) NSString * _Nonnull type;
/// Represents content type for this JWT
@property (nonatomic, readonly, copy) NSString * _Nonnull contentType;
/// Represents identifier of public key which should be used to verify signature
/// note:
/// Can be taken from <a href="https://dashboard.virgilsecurity.com/api-keys">here</a>
@property (nonatomic, readonly, copy) NSString * _Nonnull keyIdentifier;
/// String representation
@property (nonatomic, readonly, copy) NSString * _Nonnull stringRepresentation;
/// Initializer
/// \param algorithm used signature algorithm
///
/// \param type token type
///
/// \param contentType content type for this JWT
///
/// \param keyIdentifier identifier of public key which should be used to verify signature
///
///
/// throws:
/// Rethrows from JSONEncoder
- (nullable instancetype)initWithAlgorithm:(NSString * _Nonnull)algorithm type:(NSString * _Nonnull)type contentType:(NSString * _Nonnull)contentType keyIdentifier:(NSString * _Nonnull)keyIdentifier error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Imports JwtHeaderContent from base64Url encoded string
/// \param base64UrlEncoded base64Url encoded string with JwtHeaderContent
///
///
/// throws:
/// JwtHeaderContentError.base64UrlStrIsInvalid If given base64 string is invalid
/// Rethrows from JSONDecoder
- (nullable instancetype)initWithBase64UrlEncoded:(NSString * _Nonnull)base64UrlEncoded error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Declares error types and codes
/// <ul>
///   <li>
///     base64UrlStrIsInvalid: If given base64 string is invalid
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, VSSJwtHeaderContentError, "JwtHeaderContentError", closed) {
  VSSJwtHeaderContentErrorBase64UrlStrIsInvalid = 1,
};
static NSString * _Nonnull const VSSJwtHeaderContentErrorDomain = @"VirgilSDK.JwtHeaderContentError";


/// Class representing JWT Signature content
SWIFT_CLASS_NAMED("JwtSignatureContent")
@interface VSSJwtSignatureContent : NSObject
/// Signature date
@property (nonatomic, readonly, copy) NSData * _Nonnull signature;
/// String representation
@property (nonatomic, readonly, copy) NSString * _Nonnull stringRepresentation;
/// Imports JwtBodyContent from base64Url encoded string
/// \param base64UrlEncoded base64Url encoded string with JwtBodyContent
///
///
/// throws:
/// JwtBodyContentError.base64UrlStrIsInvalid If given base64 string is invalid
- (nullable instancetype)initWithBase64UrlEncoded:(NSString * _Nonnull)base64UrlEncoded error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
/// Initializer
/// \param signature Signature data
///
- (nonnull instancetype)initWithSignature:(NSData * _Nonnull)signature OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Declares error types and codes
/// <ul>
///   <li>
///     base64UrlStrIsInvalid: If given base64 string is invalid
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, VSSJwtSignatureContentError, "JwtSignatureContentError", closed) {
  VSSJwtSignatureContentErrorBase64UrlStrIsInvalid = 1,
};
static NSString * _Nonnull const VSSJwtSignatureContentErrorDomain = @"VirgilSDK.JwtSignatureContentError";


/// Class responsible for verification of JWTs
SWIFT_CLASS_NAMED("JwtVerifier")
@interface VSSJwtVerifier : NSObject
/// Public Key which should be used to verify signatures
@property (nonatomic, readonly, strong) id <VSAPublicKey> _Nonnull apiPublicKey;
/// Identifier of public key which should be used to verify signatures
@property (nonatomic, readonly, copy) NSString * _Nonnull apiPublicKeyIdentifier;
/// AccessTokenSigner implementation for verifying signatures
@property (nonatomic, readonly, strong) id <VSAAccessTokenSigner> _Nonnull accessTokenSigner;
/// Initializer
/// \param apiPublicKey Public Key which should be used to verify signatures
///
/// \param apiPublicKeyIdentifier identifier of public key which should be used to verify signatures
///
/// \param accessTokenSigner AccessTokenSigner implementation for verifying signatures
///
- (nonnull instancetype)initWithApiPublicKey:(id <VSAPublicKey> _Nonnull)apiPublicKey apiPublicKeyIdentifier:(NSString * _Nonnull)apiPublicKeyIdentifier accessTokenSigner:(id <VSAAccessTokenSigner> _Nonnull)accessTokenSigner OBJC_DESIGNATED_INITIALIZER;
/// Verifies Jwt signature
/// \param token Jwt to be verified
///
///
/// returns:
/// true if token is verified, false otherwise
- (BOOL)verifyWithToken:(VSSJwt * _Nonnull)token SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class representing Keychain entry
SWIFT_CLASS_NAMED("KeychainEntry")
@interface VSSKeychainEntry : NSObject
/// Sensitive data
@property (nonatomic, readonly, copy) NSData * _Nonnull data;
/// Alias
@property (nonatomic, readonly, copy) NSString * _Nonnull name;
/// Additional meta info
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable meta;
/// Entry creation date (obtained from Keychain)
@property (nonatomic, readonly, copy) NSDate * _Nonnull creationDate;
/// Entry modification date (obtained from Keychain)
@property (nonatomic, readonly, copy) NSDate * _Nonnull modificationDate;
/// Init
/// \param data Sensitive data
///
/// \param name Alias
///
/// \param meta Additional meta
///
/// \param creationDate Creation date
///
/// \param modificationDate Modification date
///
- (nonnull instancetype)initWithData:(NSData * _Nonnull)data name:(NSString * _Nonnull)name meta:(NSDictionary<NSString *, NSString *> * _Nullable)meta creationDate:(NSDate * _Nonnull)creationDate modificationDate:(NSDate * _Nonnull)modificationDate OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@class VSSKeychainStorageParams;

/// Class responsible for Keychain interactions.
SWIFT_CLASS_NAMED("KeychainStorage")
@interface VSSKeychainStorage : NSObject
/// Private key identifier format
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull privateKeyIdentifierFormat;)
+ (NSString * _Nonnull)privateKeyIdentifierFormat SWIFT_WARN_UNUSED_RESULT;
/// KeychainStorage parameters
@property (nonatomic, readonly, strong) VSSKeychainStorageParams * _Nonnull storageParams;
/// Initializer
/// \param storageParams KeychainStorage parameters
///
- (nonnull instancetype)initWithStorageParams:(VSSKeychainStorageParams * _Nonnull)storageParams OBJC_DESIGNATED_INITIALIZER;
/// Stores sensitive data to Keychain
/// \param data Sensitive data
///
/// \param name Alias for data
///
/// \param meta Additional meta info
///
///
/// throws:
/// KeychainStorageError
///
/// returns:
/// Stored entry
- (VSSKeychainEntry * _Nullable)storeWithData:(NSData * _Nonnull)data withName:(NSString * _Nonnull)name meta:(NSDictionary<NSString *, NSString *> * _Nullable)meta error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Updated entry in Keychain
/// \param name Alias
///
/// \param data New data
///
/// \param meta New meta info
///
///
/// throws:
/// KeychainStorageError
- (BOOL)updateEntryWithName:(NSString * _Nonnull)name data:(NSData * _Nonnull)data meta:(NSDictionary<NSString *, NSString *> * _Nullable)meta error:(NSError * _Nullable * _Nullable)error;
/// Retrieves entry from keychain
/// \param name Alias
///
///
/// throws:
/// KeychainStorageError
///
/// returns:
/// Retrieved entry
- (VSSKeychainEntry * _Nullable)retrieveEntryWithName:(NSString * _Nonnull)name error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Retrieves all entries in Keychain
///
/// throws:
/// KeychainStorageError
///
/// returns:
/// Retrieved entries
- (NSArray<VSSKeychainEntry *> * _Nullable)retrieveAllEntriesAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Deletes entry from Keychain
/// \param name Alias
///
///
/// throws:
/// KeychainStorageError
- (BOOL)deleteEntryWithName:(NSString * _Nonnull)name error:(NSError * _Nullable * _Nullable)error;
/// Deletes all entries from Keychain
///
/// throws:
/// KeychainStorageError
- (BOOL)deleteAllEntriesAndReturnError:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


enum VSSKeychainStorageErrorCodes : NSInteger;

/// Class respresenting error returned from KeychainStorage
SWIFT_CLASS_NAMED("KeychainStorageError")
@interface VSSKeychainStorageError : NSObject
/// Error code. See KeychainStorageErrorCodes
@property (nonatomic, readonly) enum VSSKeychainStorageErrorCodes errCode;
/// OSStatus as NSNumber
@property (nonatomic, readonly, strong) NSNumber * _Nullable osStatusNumber;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Declares error codes for KeychainStorage. See KeychainStorageError
/// <ul>
///   <li>
///     utf8ConvertingError: Error while converting string to utf8 binary
///   </li>
///   <li>
///     emptyKeychainResponse: Keychain response is nil
///   </li>
///   <li>
///     wrongResponseType: Unexpected keychain response type
///   </li>
///   <li>
///     errorParsingKeychainResponse: Error while deserializing keychain response
///   </li>
///   <li>
///     invalidAppBundle: Bundle.main.bundleIdentifier is empty
///   </li>
///   <li>
///     keychainError: Keychain returned error
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, VSSKeychainStorageErrorCodes, "KeychainStorageErrorCodes", closed) {
  VSSKeychainStorageErrorCodesUtf8ConvertingError = 1,
  VSSKeychainStorageErrorCodesEmptyKeychainResponse = 2,
  VSSKeychainStorageErrorCodesWrongResponseType = 3,
  VSSKeychainStorageErrorCodesErrorParsingKeychainResponse = 4,
  VSSKeychainStorageErrorCodesInvalidAppBundle = 5,
  VSSKeychainStorageErrorCodesKeychainError = 6,
};


/// Class responsible for KeychainStorage setup
SWIFT_CLASS_NAMED("KeychainStorageParams")
@interface VSSKeychainStorageParams : NSObject
/// Application name
@property (nonatomic, readonly, copy) NSString * _Nonnull appName;
/// Access group. See https://developer.apple.com/reference/security/ksecattraccessgroup
@property (nonatomic, readonly, copy) NSString * _Nullable accessGroup;
/// Accessibility.
/// See https://developer.apple.com/documentation/security/keychain_services/keychain_items/restricting_keychain_item_accessibility
@property (nonatomic, readonly, copy) NSString * _Nonnull accessibility;
/// Factory method.
/// \param accessGroup accessGroup. Default value is nil
///
/// \param accessibility accessibility. Default value is kSecAttrAccessibleAfterFirstUnlock
///
///
/// throws:
/// KeychainStorageError
///
/// returns:
/// Initialized KeychainStorageParams
+ (VSSKeychainStorageParams * _Nullable)makeKeychainStorageParamsWithAppName:(NSString * _Nullable)appName accessGroup:(NSString * _Nullable)accessGroup accessibility:(NSString * _Nullable)accessibility error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class responsible for signing RawSignerModel
SWIFT_CLASS_NAMED("ModelSigner")
@interface VSSModelSigner : NSObject
/// Signer identifier for self signatures
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull selfSignerIdentifier;)
+ (NSString * _Nonnull)selfSignerIdentifier SWIFT_WARN_UNUSED_RESULT;
/// CardCrypto implementation instance for generating signatures
@property (nonatomic, readonly, strong) id <VSACardCrypto> _Nonnull cardCrypto;
/// Initializer
/// \param cardCrypto CardCrypto implementation instance for generating signatures
///
- (nonnull instancetype)initWithCardCrypto:(id <VSACardCrypto> _Nonnull)cardCrypto OBJC_DESIGNATED_INITIALIZER;
/// Adds signature to given RawSignedModel with provided signer, privateKey and additionalData
/// \param model RawSignedModel to sign
///
/// \param signer identifier of signer
///
/// \param privateKey PrivateKey to sign with
///
/// \param additionalData additionalData to sign with model
///
///
/// throws:
/// corresponding error id signature generation fails
- (BOOL)signWithModel:(VSSRawSignedModel * _Nonnull)model signer:(NSString * _Nonnull)signer privateKey:(id <VSAPrivateKey> _Nonnull)privateKey additionalData:(NSData * _Nullable)additionalData error:(NSError * _Nullable * _Nullable)error;
/// Adds owner’s signature to given RawSignedModel using provided PrivateKey
/// \param model RawSignedModel to sign
///
/// \param privateKey PrivateKey to sign with
///
/// \param additionalData additionalData to sign with model
///
///
/// throws:
/// corresponding error id signature generation fails
- (BOOL)selfSignWithModel:(VSSRawSignedModel * _Nonnull)model privateKey:(id <VSAPrivateKey> _Nonnull)privateKey additionalData:(NSData * _Nullable)additionalData error:(NSError * _Nullable * _Nullable)error;
/// Adds signature to given RawSignedModel with provided signer, privateKey and additionalData
/// \param model RawSignedModel to sign
///
/// \param signer identifier of signer
///
/// \param privateKey PrivateKey to sign with
///
/// \param extraFields Dictionary with extra data to sign with model
///
///
/// throws:
/// corresponding error id signature generation fails
- (BOOL)signWithModel:(VSSRawSignedModel * _Nonnull)model signer:(NSString * _Nonnull)signer privateKey:(id <VSAPrivateKey> _Nonnull)privateKey extraFields:(NSDictionary<NSString *, NSString *> * _Nullable)extraFields error:(NSError * _Nullable * _Nullable)error;
/// Adds owner’s signature to given RawSignedModel using provided PrivateKey
/// \param model RawSignedModel to sign
///
/// \param privateKey PrivateKey to sign with
///
/// \param extraFields Dictionary with extra data to sign with model
///
///
/// throws:
/// corresponding error id signature generation fails
- (BOOL)selfSignWithModel:(VSSRawSignedModel * _Nonnull)model privateKey:(id <VSAPrivateKey> _Nonnull)privateKey extraFields:(NSDictionary<NSString *, NSString *> * _Nullable)extraFields error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Mutex
SWIFT_CLASS_NAMED("Mutex")
@interface VSSMutex : NSObject
/// Init
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Tries to lock mutex
///
/// returns:
/// true if lock succeeded, false - otherwise
- (BOOL)trylock SWIFT_WARN_UNUSED_RESULT;
/// Locks mutex
///
/// throws:
/// MutexError
- (BOOL)lockAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Unlocks mutex
///
/// throws:
/// MutexError
- (BOOL)unlockAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Executes closure synchronously
/// \param closure closure to run
///
///
/// throws:
/// MutexError
- (BOOL)executeSyncAndReturnError:(NSError * _Nullable * _Nullable)error closure:(SWIFT_NOESCAPE void (^ _Nonnull)(void))closure;
@end


/// Class for aggregating PrivateKey and meta info
SWIFT_CLASS_NAMED("PrivateKeyEntry")
@interface VSSPrivateKeyEntry : NSObject
/// PrivateKey
@property (nonatomic, readonly, strong) id <VSAPrivateKey> _Nonnull privateKey;
/// Meta info
@property (nonatomic, readonly, copy) NSDictionary<NSString *, NSString *> * _Nullable meta;
/// Initializer
/// \param privateKey PrivateKey
///
/// \param meta Meta info
///
- (nonnull instancetype)initWithPrivateKey:(id <VSAPrivateKey> _Nonnull)privateKey meta:(NSDictionary<NSString *, NSString *> * _Nullable)meta OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class VSSKeyStorage;
@protocol VSAPrivateKeyExporter;

/// Class responsible for storing Private Keys
SWIFT_CLASS_NAMED("PrivateKeyStorage")
@interface VSSPrivateKeyStorage : NSObject
/// Instance for storing, loading, deleting KeyEntries
@property (nonatomic, readonly, strong) VSSKeyStorage * _Nonnull keyStorage;
/// PrivateKeyExporter implementation instance for import/export PrivateKey
@property (nonatomic, readonly, strong) id <VSAPrivateKeyExporter> _Nonnull privateKeyExporter;
/// PrivateKeyStorage initializer
/// \param privateKeyExporter PrivateKeyExporter to use it for import/export stored Private Keys
///
/// \param keyStorage keychain key storage
///
- (nonnull instancetype)initWithPrivateKeyExporter:(id <VSAPrivateKeyExporter> _Nonnull)privateKeyExporter keyStorage:(VSSKeyStorage * _Nonnull)keyStorage OBJC_DESIGNATED_INITIALIZER;
/// Stores Private Key with meta
/// \param privateKey PrivateKey to store
///
/// \param name identifier for loading key back
///
/// \param meta Dictionary with any meta data
///
///
/// throws:
/// Rethrows from PrivateKeyExporter, KeyStorage
- (BOOL)storeWithPrivateKey:(id <VSAPrivateKey> _Nonnull)privateKey name:(NSString * _Nonnull)name meta:(NSDictionary<NSString *, NSString *> * _Nullable)meta error:(NSError * _Nullable * _Nullable)error;
/// Loads <code>PrivateKeyEntry</code> with imported Private Key and meta
/// \param name stored entry name
///
///
/// throws:
/// Rethrows from PrivateKeyExporter, KeyStorage
///
/// returns:
/// <code>PrivateKeyEntry</code> with imported Private Key and meta
- (VSSPrivateKeyEntry * _Nullable)loadWithName:(NSString * _Nonnull)name error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Checks whether key entry with given name exists
/// \param name stored entry name
///
///
/// returns:
/// true if entry with this name exists, false otherwise
- (BOOL)existsWithName:(NSString * _Nonnull)name SWIFT_WARN_UNUSED_RESULT;
/// Removes key entry with given name
/// \param name key entry name to delete
///
///
/// throws:
/// Rethrows from KeyStorage
- (BOOL)deleteWithName:(NSString * _Nonnull)name error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents content of Virgil Card
SWIFT_CLASS_NAMED("RawCardContent")
@interface VSSRawCardContent : NSObject
/// Card identity
@property (nonatomic, readonly, copy) NSString * _Nonnull identity;
/// PublicKey data
@property (nonatomic, readonly, copy) NSData * _Nonnull publicKey;
/// Identifier of outdated previous Virgil Card with same identity.
@property (nonatomic, readonly, copy) NSString * _Nullable previousCardId;
/// Version of Virgil Card
@property (nonatomic, readonly, copy) NSString * _Nonnull version;
/// UTC timestamp of creation date
@property (nonatomic, readonly) int64_t createdAt;
/// Initializes a new <code>RawCardContent</code> with the provided content
/// \param identity Card identity
///
/// \param publicKey PublicKey data
///
/// \param previousCardId Identifier of previous Virgil Card with same identity
///
/// \param version Virgil Card version
///
/// \param createdAt Date of creation
///
- (nonnull instancetype)initWithIdentity:(NSString * _Nonnull)identity publicKey:(NSData * _Nonnull)publicKey previousCardId:(NSString * _Nullable)previousCardId version:(NSString * _Nonnull)version createdAt:(NSDate * _Nonnull)createdAt;
/// Initializes a new <code>RawCardContent</code> with the provided content
/// \param identity Card identity
///
/// \param publicKey PublicKey data
///
/// \param previousCardId Identifier of previous Virgil Card with same identity
///
/// \param version Virgil Card version
///
/// \param createdAtTimestamp Timestamp of creation
///
- (nonnull instancetype)initWithIdentity:(NSString * _Nonnull)identity publicKey:(NSData * _Nonnull)publicKey previousCardId:(NSString * _Nullable)previousCardId version:(NSString * _Nonnull)version createdAtTimestamp:(int64_t)createdAtTimestamp OBJC_DESIGNATED_INITIALIZER;
/// Initializes <code>RawCardContent</code> from binary content snapshot
/// \param snapshot Binary snapshot of <code>RawCardContent</code>
///
///
/// throws:
/// Rethrows from JSONDecoder
- (nullable instancetype)initWithSnapshot:(NSData * _Nonnull)snapshot error:(NSError * _Nullable * _Nullable)error;
/// Takes binary snapshot of <code>RawCardContent</code>
///
/// throws:
/// Rethrows from JSONEncoder
///
/// returns:
/// Binary snapshot of <code>RawCardContent</code>
- (NSData * _Nullable)snapshotAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Model for representing service errors
SWIFT_CLASS_NAMED("RawServiceError")
@interface VSSRawServiceError : NSObject
/// Code of error
@property (nonatomic, readonly) NSInteger code;
/// Description of error
@property (nonatomic, readonly, copy) NSString * _Nonnull message;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents signature for <code>RawSignedModel</code>
SWIFT_CLASS_NAMED("RawSignature")
@interface VSSRawSignature : NSObject
/// Identifier of signer
/// important:
/// Must be unique. Reserved values:
/// <ul>
///   <li>
///     Self signatures: “self”
///   </li>
///   <li>
///     Virgil Service signatures: “virgil”
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSString * _Nonnull signer;
/// Signature data
@property (nonatomic, readonly, copy) NSData * _Nonnull signature;
/// Additional data
@property (nonatomic, readonly, copy) NSData * _Nullable snapshot;
/// Initializes a new <code>RawSignature</code> with the provided signer, signature and snapshot
/// \param signer identifier of signer
///
/// \param signature signature data
///
/// \param snapshot additional data
///
- (nonnull instancetype)initWithSigner:(NSString * _Nonnull)signer signature:(NSData * _Nonnull)signature snapshot:(NSData * _Nullable)snapshot OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents some model in binary form that can have signatures and corresponds to Virgil Cards Service model
SWIFT_CLASS_NAMED("RawSignedModel")
@interface VSSRawSignedModel : NSObject
/// Snapshot of <code>RawCardContent</code>
@property (nonatomic, readonly, copy) NSData * _Nonnull contentSnapshot;
/// Array with RawSignatures of card
@property (nonatomic, readonly, copy) NSArray<VSSRawSignature *> * _Nonnull signatures;
/// Initializes a new <code>RawSignedModel</code> with the provided contentSnapshot
/// \param contentSnapshot data with snapshot of content
///
- (nonnull instancetype)initWithContentSnapshot:(NSData * _Nonnull)contentSnapshot OBJC_DESIGNATED_INITIALIZER;
/// Initializes <code>RawSignedModel</code> from json dictionary
/// \param json Json-compatible dictionary
///
///
/// throws:
/// Rethrows from JSONDecoder and NSJSONSerialization
///
/// returns:
/// RawSignedModel instance
+ (VSSRawSignedModel * _Nullable)importFromJson:(id _Nonnull)json error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Initializes <code>RawSignedModel</code> from base64 encoded string
/// \param base64EncodedString Base64 encoded string with <code>RawSignedModel</code>
///
///
/// throws:
/// RawSignedModelError.invalidBase64String if passed string is not base64 encoded data.
/// Rethrows from JSONDecoder
///
/// returns:
/// RawSignedModel instance
+ (VSSRawSignedModel * _Nullable)importFromBase64Encoded:(NSString * _Nonnull)base64EncodedString error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Exports <code>RawSignedModel</code> as base64 encoded string
///
/// throws:
/// Rethrows from JSONEncoder
///
/// returns:
/// Base64 encoded string with <code>RawSignedModel</code>
- (NSString * _Nullable)exportAsBase64EncodedStringAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Exports <code>RawSignedModel</code> as json dictionary
///
/// throws:
/// Rethrows from JSONEncoder and JSONSerialization
///
/// returns:
/// Json-compatible dictionary with <code>RawSignedModel</code>
- (id _Nullable)exportAsJsonAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Adds new signature
/// \param signature signature to add
///
///
/// throws:
/// RawSignedModelError.duplicateSignature if signature with same signer already exists
- (BOOL)addSignature:(VSSRawSignature * _Nonnull)signature error:(NSError * _Nullable * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Declares error types and codes
/// <ul>
///   <li>
///     invalidBase64String: Passed string is not correct base64 encoded string
///   </li>
///   <li>
///     duplicateSignature: Signature with same signer already exists
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, VSSRawSignedModelError, "RawSignedModelError", closed) {
  VSSRawSignedModelErrorInvalidBase64String = 1,
  VSSRawSignedModelErrorDuplicateSignature = 2,
};
static NSString * _Nonnull const VSSRawSignedModelErrorDomain = @"VirgilSDK.RawSignedModelError";

/// Declares error types and codes
/// <ul>
///   <li>
///     urlRequestIsIncompleteOrInvalid: Provided URLRequest is incomplete or invalid
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, VSSRequestError, "RequestError", closed) {
  VSSRequestErrorUrlRequestIsIncompleteOrInvalid = 1,
};
static NSString * _Nonnull const VSSRequestErrorDomain = @"VirgilSDK.RequestError";


/// Represents Http response
SWIFT_CLASS("_TtC9VirgilSDK8Response")
@interface Response : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// KeychainStorage that sandboxes entries using identity and prefix
SWIFT_CLASS_NAMED("SandboxedKeychainStorage")
@interface VSSSandboxedKeychainStorage : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end



/// Declares error types and codes for KeychainStorageWrapper
/// <ul>
///   <li>
///     errorConvertingKeychainEntry: Invalid Keychain entry
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, VSSSandboxedKeychainStorageError, "SandboxedKeychainStorageError", closed) {
  VSSSandboxedKeychainStorageErrorErrorConvertingKeychainEntry = 0,
};
static NSString * _Nonnull const VSSSandboxedKeychainStorageErrorDomain = @"VirgilSDK.SandboxedKeychainStorageError";

/// Declares error types and codes
/// <ul>
///   <li>
///     noUrlInRequest: Provided URLRequest doesn’t have url
///   </li>
///   <li>
///     wrongResponseType: Response is not of HTTPURLResponse type
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, VSSServiceConnectionError, "ServiceConnectionError", closed) {
  VSSServiceConnectionErrorNoUrlInRequest = 1,
  VSSServiceConnectionErrorWrongResponseType = 2,
};
static NSString * _Nonnull const VSSServiceConnectionErrorDomain = @"VirgilSDK.ServiceConnectionError";


/// Represent card service error
SWIFT_CLASS_NAMED("ServiceError")
@interface VSSServiceError : NSObject
/// Http status code
@property (nonatomic, readonly) NSInteger httpStatusCode;
/// Recieved and decoded <code>RawServiceError</code>
@property (nonatomic, readonly, strong) VSSRawServiceError * _Nonnull rawServiceError;
/// Initializer
/// \param rawServiceError recieved and decoded rawServiceError
///
- (nonnull instancetype)initWithHttpStatusCode:(NSInteger)httpStatusCode rawServiceError:(VSSRawServiceError * _Nonnull)rawServiceError OBJC_DESIGNATED_INITIALIZER;
/// Error domain or Error instances thrown from Service
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull errorDomain;)
+ (NSString * _Nonnull)errorDomain SWIFT_WARN_UNUSED_RESULT;
/// Code of error
@property (nonatomic, readonly) NSInteger errorCode;
/// Provides info about the error. Error message can be recieve by NSLocalizedDescriptionKey
@property (nonatomic, readonly, copy) NSDictionary<NSString *, id> * _Nonnull errorUserInfo;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Declares error types and codes
/// <ul>
///   <li>
///     invalidGetRequestParameters: GET request parameters are not [String: String] and cannot be encoded
///   </li>
///   <li>
///     urlComponentsConvertingFailed: Error building url from components during GET request
///   </li>
///   <li>
///     getQueryWithDecodableIsNotSupported: GET query with Encodable body is not supported
///   </li>
///   <li>
///     duplicateHeadersKey: Passed headers dictionary contains forbidden http header keys
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, VSSServiceRequestError, "ServiceRequestError", closed) {
  VSSServiceRequestErrorInvalidGetRequestParameters = 1,
  VSSServiceRequestErrorUrlComponentsConvertingFailed = 2,
  VSSServiceRequestErrorGetQueryWithDecodableIsNotSupported = 3,
  VSSServiceRequestErrorDuplicateHeadersKey = 4,
};
static NSString * _Nonnull const VSSServiceRequestErrorDomain = @"VirgilSDK.ServiceRequestError";


/// Class used to provide additional info for AccessTokenProvider and explain why token is needed
SWIFT_CLASS_NAMED("TokenContext")
@interface VSSTokenContext : NSObject
/// Identity to use in token
@property (nonatomic, readonly, copy) NSString * _Nullable identity;
/// Requested service
@property (nonatomic, readonly, copy) NSString * _Nonnull service;
/// Operation for which token is needed
/// CardManager uses following operations:
/// <ul>
///   <li>
///     “get”
///   </li>
///   <li>
///     “search”
///   </li>
///   <li>
///     “publish”
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSString * _Nonnull operation;
/// AccessTokenProvider should reset cached token, if such exist
@property (nonatomic, readonly) BOOL forceReload;
/// Initializer
/// \param identity Identity to use in token
///
/// \param service Requested service
///
/// \param operation Operation for which token is needed
///
/// \param forceReload AccessTokenProvider should reset cached token, if such exist
///
- (nonnull instancetype)initWithIdentity:(NSString * _Nullable)identity service:(NSString * _Nonnull)service operation:(NSString * _Nonnull)operation forceReload:(BOOL)forceReload OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class representing verifier credentials
SWIFT_CLASS_NAMED("VerifierCredentials")
@interface VSSVerifierCredentials : NSObject
/// Identifier of signer
/// important:
/// Must be unique. Reserved values:
/// <ul>
///   <li>
///     Self verifier: “self”
///   </li>
///   <li>
///     Virgil Service verifier: “virgil”
///   </li>
/// </ul>
@property (nonatomic, readonly, copy) NSString * _Nonnull signer;
/// Exported Public Key to verify with
@property (nonatomic, readonly, copy) NSData * _Nonnull publicKey;
/// Initializer
/// \param signer identifier of signer
///
/// \param publicKey exported Public Key to verify with
///
- (nonnull instancetype)initWithSigner:(NSString * _Nonnull)signer publicKey:(NSData * _Nonnull)publicKey OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class VSSWhitelist;

/// Virgil implementation of CardVerifier protocol
/// By default verifies Card’s self signature and Virgil Cards Service signature
SWIFT_CLASS_NAMED("VirgilCardVerifier")
@interface VSSVirgilCardVerifier : NSObject <VSSCardVefifier>
/// Signer identifier for self signatures
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull selfSignerIdentifier;)
+ (NSString * _Nonnull)selfSignerIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Signer identifier for Virgil Cards Service signatures
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull virgilSignerIdentifier;)
+ (NSString * _Nonnull)virgilSignerIdentifier SWIFT_WARN_UNUSED_RESULT;
/// Base64 encoded string with Virgil Service’s Public Key for verifying Virgil Cards Service signatures
/// note:
/// Can be found <a href="https://dashboard.virgilsecurity.com">here</a>
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull virgilPublicKeyBase64;)
+ (NSString * _Nonnull)virgilPublicKeyBase64 SWIFT_WARN_UNUSED_RESULT;
/// CardCrypto instance
@property (nonatomic, readonly, strong) id <VSACardCrypto> _Nonnull cardCrypto;
/// Imported Virgil Service’s Public Key for verifying Virgil Cards Service signatures
@property (nonatomic, readonly, strong) id <VSAPublicKey> _Nonnull virgilPublicKey;
/// VirgilCardVerifier will verify self signature if true
@property (nonatomic) BOOL verifySelfSignature;
/// VirgilCardVerifier will verify Virgil Cards Service signatures if true
@property (nonatomic) BOOL verifyVirgilSignature;
/// Array with collections of verifiers
/// important:
/// VirgilCardVerifier verifies Card if it contains signature from AT LEAST
/// one verifier from EACH Whitelist
@property (nonatomic, copy) NSArray<VSSWhitelist *> * _Nonnull whitelists;
/// Initializer
/// important:
/// VirgilCardVerifier verifies Card if it contains signature from AT LEAST
/// one verifier from EACH Whitelist
/// \param cardCrypto CardCrypto instance
///
/// \param whitelists collections of verifiers
///
- (nullable instancetype)initWithCardCrypto:(id <VSACardCrypto> _Nonnull)cardCrypto whitelists:(NSArray<VSSWhitelist *> * _Nonnull)whitelists OBJC_DESIGNATED_INITIALIZER;
/// Verifies Card instance using set rules
/// important:
/// VirgilCardVerifier verifies Card if it contains signature from AT LEAST
/// one verifier from EACH Whitelist
/// \param card Card to verify
///
///
/// returns:
/// true if Card verified, false otherwise
- (BOOL)verifyCard:(VSSCard * _Nonnull)card SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Class representing collection of verifiers
/// important:
/// Card should contain signature from AT LEAST one verifier from collection of verifiers
SWIFT_CLASS_NAMED("Whitelist")
@interface VSSWhitelist : NSObject
/// Array of verifier credentials
/// note:
/// Card must be signed by AT LEAST one of them
@property (nonatomic, readonly, copy) NSArray<VSSVerifierCredentials *> * _Nonnull verifiersCredentials;
/// Initializer
/// \param verifiersCredentials array of verifier credentials
///
///
/// throws:
/// corresponding <code>WhitelistError</code>
- (nullable instancetype)initWithVerifiersCredentials:(NSArray<VSSVerifierCredentials *> * _Nonnull)verifiersCredentials error:(NSError * _Nullable * _Nullable)error OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Declares error types and codes
/// <ul>
///   <li>
///     duplicateSigner: tried to add verifier credentials from same signer
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, VSSWhitelistError, "WhitelistError", closed) {
  VSSWhitelistErrorDuplicateSigner = 1,
};
static NSString * _Nonnull const VSSWhitelistErrorDomain = @"VirgilSDK.WhitelistError";

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
