// Generated by Apple Swift version 5.4.2 (swiftlang-1205.0.28.2 clang-1205.0.19.57)
#ifndef VIRGILCRYPTOAPIIMPL_SWIFT_H
#define VIRGILCRYPTOAPIIMPL_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(ns_consumed)
# define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
#else
# define SWIFT_RELEASES_ARGUMENT
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if !defined(IBSegueAction)
# define IBSegueAction
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
@import VirgilCrypto;
@import VirgilCryptoAPI;
#endif

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="VirgilCryptoApiImpl",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class VSMVirgilCrypto;

/// Adapter for AccessTokenSigner protocol using VirgilCrypto
SWIFT_CLASS_NAMED("VirgilAccessTokenSigner")
@interface VSMVirgilAccessTokenSigner : NSObject
/// VirgilCrypto instance
@property (nonatomic, readonly, strong) VSMVirgilCrypto * _Nonnull virgilCrypto;
/// Initializer
/// \param virgilCrypto VirgilCrypto instance
///
- (nonnull instancetype)initWithVirgilCrypto:(VSMVirgilCrypto * _Nonnull)virgilCrypto OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSData;
@protocol VSAPrivateKey;
@protocol VSAPublicKey;
@class NSNumber;
@class NSString;

@interface VSMVirgilAccessTokenSigner (SWIFT_EXTENSION(VirgilCryptoApiImpl)) <VSAAccessTokenSigner>
/// Generates digital signature for token
/// \param token Token to be signed
///
/// \param privateKey Private key
///
///
/// throws:
/// Rethrows from VirgilCrypto.
/// VirgilCryptoError.passedKeyIsNotVirgil if passed key is of wrong type
///
/// returns:
/// Digital signature data
- (NSData * _Nullable)generateTokenSignatureOf:(NSData * _Nonnull)token using:(id <VSAPrivateKey> _Nonnull)privateKey error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Verifies token’s signature.
/// \param signature Digital signature
///
/// \param token Token data
///
/// \param publicKey Signer’s public key
///
///
/// returns:
/// true if verified, false otherwise
- (BOOL)verifyTokenSignature:(NSData * _Nonnull)signature of:(NSData * _Nonnull)token with:(id <VSAPublicKey> _Nonnull)publicKey SWIFT_WARN_UNUSED_RESULT;
/// Returns algorithm used for signing
///
/// returns:
/// algorithm string. Currently VEDS512
- (NSString * _Nonnull)getAlgorithm SWIFT_WARN_UNUSED_RESULT;
@end


/// Adapter for CardCrypto protocol using VirgilCrypto
SWIFT_CLASS_NAMED("VirgilCardCrypto")
@interface VSMVirgilCardCrypto : NSObject
/// VirgilCrypto instance
@property (nonatomic, readonly, strong) VSMVirgilCrypto * _Nonnull virgilCrypto;
/// Initializer
/// \param virgilCrypto VirgilCrypto instance
///
- (nonnull instancetype)initWithVirgilCrypto:(VSMVirgilCrypto * _Nonnull)virgilCrypto OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface VSMVirgilCardCrypto (SWIFT_EXTENSION(VirgilCryptoApiImpl)) <VSACardCrypto>
/// Generates digital signature of data using specified private key.
/// \param data Data to be signed
///
/// \param privateKey Signer’s private key
///
///
/// throws:
/// Rethrows from VirgilCrypto.
/// VirgilCryptoError.passedKeyIsNotVirgil if passed key is of wrong type
///
/// returns:
/// Digitar signature data
- (NSData * _Nullable)generateSignatureOf:(NSData * _Nonnull)data using:(id <VSAPrivateKey> _Nonnull)privateKey error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Verifies digital signature.
/// \param signature Digital signature data
///
/// \param data Data that was signed
///
/// \param publicKey Signer’s public key
///
///
/// returns:
/// true if verified, false otherwise
- (BOOL)verifySignature:(NSData * _Nonnull)signature of:(NSData * _Nonnull)data with:(id <VSAPublicKey> _Nonnull)publicKey SWIFT_WARN_UNUSED_RESULT;
/// Computes SHA-512.
/// \param data Data to be hashed
///
///
/// throws:
/// Doesn’t throw. throws added to conform to protocol
///
/// returns:
/// Resulting hash value
- (NSData * _Nullable)generateSHA512For:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Imports public key from DER or PEM format
/// \param data Public key data in DER or PEM format
///
///
/// throws:
/// Rethrows from VirgilCrypto
///
/// returns:
/// Imported public key
- (id <VSAPublicKey> _Nullable)importPublicKeyFrom:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Exports public key to DER format
/// \param publicKey Public key to be exported
///
///
/// throws:
/// VirgilCryptoError.passedKeyIsNotVirgil if passed key is of wrong type
///
/// returns:
/// Public key in DER format
- (NSData * _Nullable)exportPublicKey:(id <VSAPublicKey> _Nonnull)publicKey error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

@class VSMVirgilPublicKey;
@class NSInputStream;
@class NSOutputStream;
@class VSMVirgilPrivateKey;

/// Class for high level interactions with crypto library
SWIFT_CLASS_NAMED("VirgilCrypto")
@interface VSMVirgilCrypto : NSObject
/// Key used to embed Data Signature into ASN.1 structure
/// Used in signThenEncrypt & decryptThenVerify
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CustomParamKeySignature;)
+ (NSString * _Nonnull)CustomParamKeySignature SWIFT_WARN_UNUSED_RESULT;
/// Key used to embed signer identity into ASN.1 structure
/// Used in signThenEncrypt & decryptThenVerify
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, copy) NSString * _Nonnull CustomParamKeySignerId;)
+ (NSString * _Nonnull)CustomParamKeySignerId SWIFT_WARN_UNUSED_RESULT;
/// Default key type used to generate keys.
@property (nonatomic, readonly) VSCKeyType defaultKeyType;
/// Use old algorithm to generate key fingerprints
/// Current algorithm: first 8 bytes of SHA512 of public key in DER format
/// Old algorithm: SHA256 of public key in DER format
/// NOTE: Use SHA256 fingerprint only if you need to work with encrypted data,
/// that was encrypted using those fingerprint. (e.g. version 2 of this library)
@property (nonatomic, readonly) BOOL useSHA256Fingerprints;
/// Initializer
/// \param defaultKeyType Key type used to generate keys by default
///
/// \param useSHA256Fingerprints Use old algorithm to generate key fingerprints
/// Current algorithm: first 8 bytes of SHA512 of public key in DER format
/// Old algorithm SHA256 of public key in DER format
/// NOTE: Use SHA256 fingerprint only if you need to work with encrypted data,
/// that was encrypted using those fingerprint. (e.g. version 2 of this library)
///
- (nonnull instancetype)initWithDefaultKeyType:(VSCKeyType)defaultKeyType useSHA256Fingerprints:(BOOL)useSHA256Fingerprints OBJC_DESIGNATED_INITIALIZER;
/// Encrypts data for passed PublicKeys
/// <ol>
///   <li>
///     Generates random AES-256 KEY1
///   </li>
///   <li>
///     Encrypts data with KEY1 using AES-256-GCM
///   </li>
///   <li>
///     Generates ephemeral key pair for each recipient
///   </li>
///   <li>
///     Uses Diffie-Hellman to obtain shared secret with each recipient’s public key & each ephemeral private key
///   </li>
///   <li>
///     Computes KDF to obtain AES-256 key from shared secret for each recipient
///   </li>
///   <li>
///     Encrypts KEY1 with this key using AES-256-CBC for each recipient
///   </li>
/// </ol>
/// \param data Data to be encrypted
///
/// \param recipients Recipients
///
///
/// throws:
/// Rethrows from Cipher class
///
/// returns:
/// Encrypted data
- (NSData * _Nullable)encrypt:(NSData * _Nonnull)data for:(NSArray<VSMVirgilPublicKey *> * _Nonnull)recipients error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Encrypts data stream for passed PublicKeys
/// <ol>
///   <li>
///     Generates random AES-256 KEY1
///   </li>
///   <li>
///     Encrypts data with KEY1 using AES-256-GCM
///   </li>
///   <li>
///     Generates ephemeral key pair for each recipient
///   </li>
///   <li>
///     Uses Diffie-Hellman to obtain shared secret with each recipient’s public key & each ephemeral private key
///   </li>
///   <li>
///     Computes KDF to obtain AES-256 key from shared secret for each recipient
///   </li>
///   <li>
///     Encrypts KEY1 with this key using AES-256-CBC for each recipient
///   </li>
/// </ol>
/// \param stream data Stream to be encrypted
///
/// \param outputStream Stream with encrypted data
///
/// \param recipients Recipients
///
///
/// throws:
/// Rethrows from ChunkCipher
- (BOOL)encrypt:(NSInputStream * _Nonnull)stream to:(NSOutputStream * _Nonnull)outputStream for:(NSArray<VSMVirgilPublicKey *> * _Nonnull)recipients error:(NSError * _Nullable * _Nullable)error;
/// Verifies digital signature of data
/// Note: Verification algorithm depends on PublicKey type. Default: EdDSA
/// \param signature Digital signature
///
/// \param data Data that was signed
///
/// \param publicKey Signer public key
///
///
/// returns:
/// True if signature is verified, else - otherwise
- (BOOL)verifySignature:(NSData * _Nonnull)signature of:(NSData * _Nonnull)data with:(VSMVirgilPublicKey * _Nonnull)publicKey SWIFT_WARN_UNUSED_RESULT;
/// Verifies digital signature of data stream
/// Note: Verification algorithm depends on PublicKey type. Default: EdDSA
/// \param signature Digital signature
///
/// \param stream Data stream that was signed
///
/// \param publicKey Signed public key
///
///
/// returns:
/// True if signature is verified, else - otherwise
- (BOOL)verifyStreamSignature:(NSData * _Nonnull)signature of:(NSInputStream * _Nonnull)stream with:(VSMVirgilPublicKey * _Nonnull)publicKey SWIFT_WARN_UNUSED_RESULT;
/// Decrypts data using passed PrivateKey
/// <ol>
///   <li>
///     Uses Diffie-Hellman to obtain shared secret with sender ephemeral public key & recipient’s private key
///   </li>
///   <li>
///     Computes KDF to obtain AES-256 KEY2 from shared secret
///   </li>
///   <li>
///     Decrypts KEY1 using AES-256-CBC
///   </li>
///   <li>
///     Decrypts data using KEY1 and AES-256-GCM
///   </li>
/// </ol>
/// \param data Encrypted data
///
/// \param privateKey Recipient’s private key
///
///
/// throws:
/// Rethrows from Cipher
///
/// returns:
/// Decrypted data
- (NSData * _Nullable)decrypt:(NSData * _Nonnull)data with:(VSMVirgilPrivateKey * _Nonnull)privateKey error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// \param stream Stream with encrypted data
///
/// \param outputStream Stream with decrypted data
///
/// \param privateKey Recipient’s private key
///
///
/// throws:
/// Rethrows from ChunkCipher
- (BOOL)decrypt:(NSInputStream * _Nonnull)stream to:(NSOutputStream * _Nonnull)outputStream with:(VSMVirgilPrivateKey * _Nonnull)privateKey error:(NSError * _Nullable * _Nullable)error;
/// Signs (with private key) Then Encrypts data for passed PublicKeys
/// <ol>
///   <li>
///     Generates signature depending on KeyType
///   </li>
///   <li>
///     Generates random AES-256 KEY1
///   </li>
///   <li>
///     Encrypts both data and signature with KEY1 using AES-256-GCM
///   </li>
///   <li>
///     Generates ephemeral key pair for each recipient
///   </li>
///   <li>
///     Uses Diffie-Hellman to obtain shared secret with each recipient’s public key & each ephemeral private key
///   </li>
///   <li>
///     Computes KDF to obtain AES-256 key from shared secret for each recipient
///   </li>
///   <li>
///     Encrypts KEY1 with this key using AES-256-CBC for each recipient
///   </li>
/// </ol>
/// \param data Data to be signedThenEncrypted
///
/// \param privateKey Sender private key
///
/// \param recipients Recipients’ public keys
///
///
/// throws:
/// Rethrows from Signer and Cipher
///
/// returns:
/// SignedThenEncrypted data
- (NSData * _Nullable)signThenEncrypt:(NSData * _Nonnull)data with:(VSMVirgilPrivateKey * _Nonnull)privateKey for:(NSArray<VSMVirgilPublicKey *> * _Nonnull)recipients error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Decrypts (with private key) Then Verifies data using signer PublicKey
/// <ol>
///   <li>
///     Uses Diffie-Hellman to obtain shared secret with sender ephemeral public key & recipient’s private key
///   </li>
///   <li>
///     Computes KDF to obtain AES-256 KEY2 from shared secret
///   </li>
///   <li>
///     Decrypts KEY1 using AES-256-CBC
///   </li>
///   <li>
///     Decrypts both data and signature using KEY1 and AES-256-GCM
///   </li>
///   <li>
///     Verifies signature
///   </li>
/// </ol>
/// \param data SignedThenEncrypted data
///
/// \param privateKey Receiver’s private key
///
/// \param signerPublicKey Signer public key
///
///
/// throws:
/// Rethrows from Cipher and Signer
///
/// returns:
/// DecryptedThenVerified data
- (NSData * _Nullable)decryptThenVerify:(NSData * _Nonnull)data with:(VSMVirgilPrivateKey * _Nonnull)privateKey using:(VSMVirgilPublicKey * _Nonnull)signerPublicKey error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Decrypts (with private key) Then Verifies data using any of signers’ PublicKeys
/// <ol>
///   <li>
///     Uses Diffie-Hellman to obtain shared secret with sender ephemeral public key & recipient’s private key
///   </li>
///   <li>
///     Computes KDF to obtain AES-256 KEY2 from shared secret
///   </li>
///   <li>
///     Decrypts KEY1 using AES-256-CBC
///   </li>
///   <li>
///     Decrypts both data and signature using KEY1 and AES-256-GCM
///   </li>
///   <li>
///     Finds corresponding PublicKey according to signer id inside data
///   </li>
///   <li>
///     Verifies signature
///   </li>
/// </ol>
/// \param data Signed Then Ecnrypted data
///
/// \param privateKey Receiver’s private key
///
/// \param signersPublicKeys Array of possible signers public keys.
/// WARNING: Data should have signature of ANY public key from array.
///
///
/// throws:
/// Rethrows from Cipher and Signer.
/// Throws VirgilCryptoError.signerNotFound if signer with such id is not found
///
/// returns:
/// DecryptedThenVerified data
- (NSData * _Nullable)decryptThenVerify:(NSData * _Nonnull)data with:(VSMVirgilPrivateKey * _Nonnull)privateKey usingOneOf:(NSArray<VSMVirgilPublicKey *> * _Nonnull)signersPublicKeys error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Generates digital signature of data using private key
/// NOTE: Returned value contains only digital signature, not data itself.
/// NOTE: Data inside this function is guaranteed to be hashed with SHA512 at least one time.
/// It’s secure to pass raw data here.
/// \param data Data to sign
///
/// \param privateKey Private key used to generate signature
///
///
/// throws:
/// Rethrows from Signer
///
/// returns:
/// Digital signature
- (NSData * _Nullable)generateSignatureOf:(NSData * _Nonnull)data using:(VSMVirgilPrivateKey * _Nonnull)privateKey error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Generates digital signature of data stream using private key
/// NOTE: Returned value contains only digital signature, not data itself.
/// NOTE: Data inside this function is guaranteed to be hashed with SHA512 at least one time.
/// It’s secure to pass raw data here.
/// \param stream Data stream to sign
///
/// \param privateKey Private key used to generate signature
///
///
/// throws:
/// Rethrows from StreamSigner
///
/// returns:
/// Digital signature
- (NSData * _Nullable)generateStreamSignatureOf:(NSInputStream * _Nonnull)stream using:(VSMVirgilPrivateKey * _Nonnull)privateKey error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Computes hash
/// \param data Data to be hashed
///
/// \param algorithm Hash algorithm to use
///
///
/// returns:
/// Hash value
- (NSData * _Nonnull)computeHashFor:(NSData * _Nonnull)data using:(VSCHashAlgorithm)algorithm SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class VSMVirgilKeyPair;

@interface VSMVirgilCrypto (SWIFT_EXTENSION(VirgilCryptoApiImpl))
/// Generates mutiple key pairs of default key type.
/// Performance-optimized for generating more than 1 key
/// \param numberOfKeyPairs Number of keys needed
///
///
/// throws:
/// Rethrows from KeyPair
///
/// returns:
/// Array of generated keys
- (NSArray<VSMVirgilKeyPair *> * _Nullable)generateMultipleKeyPairsWithNumberOfKeyPairs:(NSUInteger)numberOfKeyPairs error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Generates KeyPair of default key type
/// NOTE: If you need more than 1 keypair, consider using generateMultipleKeyPairs
///
/// throws:
/// Rethrows from KeyPair
///
/// returns:
/// Generated KeyPair
- (VSMVirgilKeyPair * _Nullable)generateKeyPairAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Generates KeyPair of given type
/// NOTE: If you need more than 1 keypair, consider using generateMultipleKeyPairs
/// \param type KeyPair type
///
///
/// throws:
/// Rethrows from KeyPair
///
/// returns:
/// Generated KeyPair
- (VSMVirgilKeyPair * _Nullable)generateKeyPairOfType:(VSCKeyType)type error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Wraps binary key pair to VirgilKeyPair instance
/// \param privateKey Binary private key
///
/// \param publicKey Binary public key
///
///
/// throws:
/// VirgilCryptoError.publicKeyToDERFailed, VirgilCryptoError.privateKeyToDERFailed
///
/// returns:
/// VirgilKeyPair instance
- (VSMVirgilKeyPair * _Nullable)wrapKeyPairWithPrivateKey:(NSData * _Nonnull)privateKey publicKey:(NSData * _Nonnull)publicKey error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


@interface VSMVirgilCrypto (SWIFT_EXTENSION(VirgilCryptoApiImpl))
/// Computes key identifiers
/// NOTE: Takes first 8 bytes of SHA512 of public key DER if useSHA256Fingerprints=false
/// and SHA256 of public key der if useSHA256Fingerprints=true
/// \param publicKeyData Public key data
///
///
/// returns:
/// Public key identifier
- (NSData * _Nonnull)computeKeyIdentifierWithPublicKeyData:(NSData * _Nonnull)publicKeyData SWIFT_WARN_UNUSED_RESULT;
/// Imports private key from raw data in DER or PEM format
/// \param data Private key in DER or PEM format
///
/// \param password Password, if password is encrypted
///
///
/// throws:
/// VirgilCryptoError.decryptPrivateKeyFailed, if private key descryption failed
/// VirgilCryptoError.privateKeyToDERFailed, if private key is corrupted, and conversion to DER failed
/// VirgilCryptoError.extractPublicKeyFailed, if public key extraction failed
///
/// returns:
/// Import PrivateKey
- (VSMVirgilPrivateKey * _Nullable)importPrivateKeyFrom:(NSData * _Nonnull)data password:(NSString * _Nullable)password error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Exports private key to DER foramt
/// WARNING: Consider using export with password
/// \param privateKey Private key to export
///
///
/// returns:
/// Private key in DER format
- (NSData * _Nonnull)exportPrivateKey:(VSMVirgilPrivateKey * _Nonnull)privateKey SWIFT_WARN_UNUSED_RESULT;
/// Exports encrypted using password private key
/// \param privateKey PrivateKey to export
///
/// \param password Password
///
///
/// throws:
/// VirgilCryptoError.encryptPrivateKeyFailed, if encryption failed
///
/// returns:
/// Exported encrypted private key
- (NSData * _Nullable)exportPrivateKey:(VSMVirgilPrivateKey * _Nonnull)privateKey password:(NSString * _Nonnull)password error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Extracts public key from private key
/// \param privateKey Private key
///
///
/// throws:
/// VirgilCryptoError.extractPublicKeyFailed, if extraction failed
///
/// returns:
/// Public Key that matches passed Private Key
- (VSMVirgilPublicKey * _Nullable)extractPublicKeyFrom:(VSMVirgilPrivateKey * _Nonnull)privateKey error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Exports public key in DER format
/// \param publicKey PublicKey to export
///
///
/// returns:
/// Exported public key in DER format
- (NSData * _Nonnull)exportPublicKey:(VSMVirgilPublicKey * _Nonnull)publicKey SWIFT_WARN_UNUSED_RESULT;
/// Imports public key from DER or PEM format
/// \param data Public key in DER or PEM format
///
///
/// throws:
/// VirgilCryptoError.publicKeyToDERFailed, if public key is corrupted and conversion to DER failed
///
/// returns:
/// Imported Public Key
- (VSMVirgilPublicKey * _Nullable)importPublicKeyFrom:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end

/// Declares error types and codes
/// <ul>
///   <li>
///     passedKeyIsNotVirgil: passed key type is incorrect
///   </li>
///   <li>
///     signerNotFound: signer with this id is not found
///   </li>
///   <li>
///     extractPublicKeyFailed: public key extraction failed
///   </li>
///   <li>
///     encryptPrivateKeyFailed: private key encryption failed
///   </li>
///   <li>
///     decryptPrivateKeyFailed: private key decryption failed
///   </li>
///   <li>
///     privateKeyToDERFailed: conversion of private key to DER failed
///   </li>
///   <li>
///     publicKeyToDERFailed: conversion of public key to DER failed
///   </li>
/// </ul>
typedef SWIFT_ENUM_NAMED(NSInteger, VSMVirgilCryptoError, "VirgilCryptoError", closed) {
  VSMVirgilCryptoErrorPassedKeyIsNotVirgil = 1,
  VSMVirgilCryptoErrorSignerNotFound = 2,
  VSMVirgilCryptoErrorExtractPublicKeyFailed = 3,
  VSMVirgilCryptoErrorEncryptPrivateKeyFailed = 4,
  VSMVirgilCryptoErrorDecryptPrivateKeyFailed = 5,
  VSMVirgilCryptoErrorPrivateKeyToDERFailed = 6,
  VSMVirgilCryptoErrorPublicKeyToDERFailed = 7,
};
static NSString * _Nonnull const VSMVirgilCryptoErrorDomain = @"VirgilCryptoApiImpl.VirgilCryptoError";


/// Aggregates Private and Public key.
SWIFT_CLASS_NAMED("VirgilKeyPair")
@interface VSMVirgilKeyPair : NSObject
/// Private key
@property (nonatomic, readonly, strong) VSMVirgilPrivateKey * _Nonnull privateKey;
/// Public key
@property (nonatomic, readonly, strong) VSMVirgilPublicKey * _Nonnull publicKey;
/// Initializer
/// \param privateKey Private key
///
/// \param publicKey Public key
///
- (nonnull instancetype)initWithPrivateKey:(VSMVirgilPrivateKey * _Nonnull)privateKey publicKey:(VSMVirgilPublicKey * _Nonnull)publicKey OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// Represents PrivateKey for operations with VirgilCrypto class
SWIFT_CLASS_NAMED("VirgilPrivateKey")
@interface VSMVirgilPrivateKey : NSObject
/// Private key identifier.
/// Equals to first 8 bytes of SHA-512 of public key in DER foramt
@property (nonatomic, readonly, copy) NSData * _Nonnull identifier;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface VSMVirgilPrivateKey (SWIFT_EXTENSION(VirgilCryptoApiImpl)) <VSAPrivateKey>
@end


/// Adapter for PrivateKeyExporter protocol using VirgilCrypto
SWIFT_CLASS_NAMED("VirgilPrivateKeyExporter")
@interface VSMVirgilPrivateKeyExporter : NSObject
/// VirgilCrypto instance
@property (nonatomic, readonly, strong) VSMVirgilCrypto * _Nonnull virgilCrypto;
/// Password used to encrypt private key. Do NOT use nil, unless your storage/transport channel is secured
@property (nonatomic, readonly, copy) NSString * _Nullable password;
/// Initializer
/// \param virgilCrypto VirgilCrypto instance
///
/// \param password Password used to encrypt private key.
/// NOTE: Do NOT use nil, unless your storage/transport channel is secured
///
- (nonnull instancetype)initWithVirgilCrypto:(VSMVirgilCrypto * _Nonnull)virgilCrypto password:(NSString * _Nullable)password OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface VSMVirgilPrivateKeyExporter (SWIFT_EXTENSION(VirgilCryptoApiImpl)) <VSAPrivateKeyExporter>
/// Exports private key to DER format
/// \param privateKey Private key to be exported
///
///
/// throws:
/// Rethrows from VirgilCrypto.
/// VirgilCryptoError.passedKeyIsNotVirgil if passed key is of wrong type
///
/// returns:
/// Exported private key in DER format
- (NSData * _Nullable)exportPrivateKeyWithPrivateKey:(id <VSAPrivateKey> _Nonnull)privateKey error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Imports Private Key from DER or PEM format
/// \param data Private key in DER or PEM format
///
///
/// throws:
/// Rethrows from VirgilCrypto
///
/// returns:
/// Imported private key
- (id <VSAPrivateKey> _Nullable)importPrivateKeyFrom:(NSData * _Nonnull)data error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
@end


/// Represents PublicKey for operations with VirgilCrypto class
SWIFT_CLASS_NAMED("VirgilPublicKey")
@interface VSMVirgilPublicKey : NSObject
/// Private key identifier.
/// Equals to first 8 bytes of SHA-512 of public key in DER foramt
@property (nonatomic, readonly, copy) NSData * _Nonnull identifier;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


@interface VSMVirgilPublicKey (SWIFT_EXTENSION(VirgilCryptoApiImpl)) <VSAPublicKey>
@end

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
#endif
